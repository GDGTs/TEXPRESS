classdef ConstructUI < handle
    
    properties

        % User interface properties, positions
        UIProperties
        UIPositions
        
        % Figure, menu, table, axes components
        UIFigure
        UIMenu
        UITable
        UIAxes
        
        % Plot data
        PlotData
        ActivePlotData
        
        % Calculated data
        UserCrop
        UserBaseline
        CalculateBaseline
        UserPeaks
        CalculateArea
        UserPeakAreaInput
        UserPeakAreaOutput
        UserPeakAreaError
    end
    
    methods
        
        % Constructor method
        function obj = ConstructUI()
            % Set user interface properties
            obj = ConstructUIProperties(obj);
            
            % Initialize data
            obj.PlotData = [];
            
            obj.ActivePlotData.XValues = [];
            obj.ActivePlotData.YValues = [];
            obj.ActivePlotData.Name = [];
            obj.ActivePlotData.ID = [];
            obj.ActivePlotData.Ions = [];
            obj.ActivePlotData.LineColor = {};
            obj.ActivePlotData.Peaks = [];
            
            obj.UserCrop = {};
            obj.UserBaseline = {};
            obj.UserPeaks = {};
            obj.UserPeakAreaInput = {};
            obj.UserPeakAreaOutput = {};
            
            % Build figure, menu, tables, axes
            obj = ConstructUIFigure(obj);
            obj = ConstructUIMenu(obj);
            obj = ConstructUITable(obj);
            obj = ConstructUIAxes(obj);
            
            % Set user interface object positions
            obj = ConstructUIPositions(obj);
            
            % Initialize other classes
            obj.CalculateBaseline = SpectraPreprocessing();
            obj.CalculateArea = PeakArea();
        end
        
        % Set global properties
        function obj = ConstructUIProperties(obj)
            
            % Turn off warnings
            warning off all
            
            % Global figure properties
            obj.UIProperties.FigureBackgroundColor = [0.94, 0.94, 0.94];
            obj.UIProperties.FigureUnits = 'pixels';

            % Global panel properties
            obj.UIProperties.PanelBackgroundColor = [0.99, 0.99, 0.99];
            obj.UIProperties.PanelForegroundColor = [0.0, 0.0, 0.0];
            obj.UIProperties.PanelHighlightColor = [0.0, 0.0, 0.0];
            obj.UIProperties.PanelBorderWidth = 3.0;
            obj.UIProperties.PanelBorderType = 'line';
            obj.UIProperties.PanelUnits = 'pixels';

            % Global table properties
            obj.UIProperties.TableBackgroundColor = [0.98, 0.98, 0.98; 0.92, 0.92, 0.92];
            obj.UIProperties.TableForegroundColor = [0.0, 0.0, 0.0];

            % Global screen size properties
            obj.UIProperties.ScreenSize = get(0, 'ScreenSize');
            obj.UIProperties.UIScreenSize = 0.75;
            obj.UIProperties.AspectRatio = ...
                obj.UIProperties.ScreenSize(3)/obj.UIProperties.ScreenSize(4);
            
            % Global font properties
            obj.UIProperties.FigureFont = 'SansSerif';
            obj.UIProperties.FigureWeight = 'light';
            obj.UIProperties.FigureFontUnits = 'pixels';           
            
            % Global axes properties
            obj.UIProperties.AxesBackgroundColor = [1,1,1];
            obj.UIProperties.TotalSamples = 0;
            obj.UIProperties.TotalIons = 0;
            obj.UIProperties.GlobalXMax = 0;
            obj.UIProperties.GlobalYMax = 0;
            obj.UIProperties.YMin = {};
            obj.UIProperties.YMax = {};
            obj.UIProperties.CropMin = 0;
            obj.UIProperties.CropMax = 0;
            obj.UIProperties.CurrentPlots = 0;
            obj.UIProperties.LineWidth = 1.25;
            
            % Initialize axes
            obj.UIAxes.SingleAxes = {};
            obj.UIAxes.MultipleAxes = {};
            
            % Individual plot containers
            obj.UIAxes.SingleAxesPlot = {};
            obj.UIAxes.MultipleAxesPlot = {};
            obj.UIAxes.SingleAxesAxesPlotPeaks = {};
            obj.UIAxes.MultipleAxesPlotPeaks = {};

            % Initial radio button settings
            obj.UIProperties.PlotOverlay = 'off';
            obj.UIProperties.PlotScale = 'off';
            obj.UIProperties.PlotTIC = 'on';
            obj.UIProperties.PlotAll = 'on';

            % Available/selected sample and ion lists
            obj.UITable.AvailableSamplesList = {};
            obj.UITable.AvailableIonsList = {};
            obj.UITable.SelectedSamplesList = [];
            obj.UITable.SelectedIonsList = [];
            
            obj.UIProperties.Smoothness = 10^5;
            obj.UIProperties.Asymmetry = 0.001;
            
            % Process mode settings
            obj.UIProperties.ProcessMode = 'off';
            obj.UIProperties.ViewBaseline = 'off';
            obj.UIProperties.ViewPeaks = 'off';
            obj.UIProperties.BaselineColor = 'black';
            
            % Figure positions
            function FigurePosition(obj, varargin)
                
                % Set width of user interface and position on screen
                obj.UIPositions.FigureWidth = ...
                    obj.UIProperties.ScreenSize(3)*obj.UIProperties.UIScreenSize;

                obj.UIPositions.FigureLeft = ...
                    (obj.UIProperties.ScreenSize(3)-obj.UIPositions.FigureWidth)/2;

                % Set height of user interface to maintain aspect ratio
                obj.UIPositions.FigureHeight = ...
                    obj.UIPositions.FigureWidth/obj.UIProperties.AspectRatio;

                obj.UIPositions.FigureBottom = ...
                    (obj.UIProperties.ScreenSize(4)-obj.UIPositions.FigureHeight)/2;

                % Figure position
                obj.UIPositions.FigurePosition = ...
                    [obj.UIPositions.FigureLeft, obj.UIPositions.FigureBottom,...
                    obj.UIPositions.FigureWidth, obj.UIPositions.FigureHeight];
            end

            % Set figure position
            FigurePosition(obj);
            
            % Set global font size
            obj.UIProperties.FigureFontSizeHeader = 0.011 * obj.UIPositions.FigureWidth;
            obj.UIProperties.FigureFontSizeBody = 0.0095 * obj.UIPositions.FigureWidth;
            
        end
        
        % Set user interface component positions
        function obj = ConstructUIPositions(obj)
            
            % Set margin proportional to shorter figure length vector
            if obj.UIPositions.FigurePosition(4) < obj.UIPositions.FigurePosition(3)
                
                % Global margin setting for UI components
                obj.UIPositions.Margin = 0.01 * obj.UIPositions.FigurePosition(4);
                
            else
                % Global margin setting for UI components
                obj.UIPositions.Margin = 0.01 * obj.UIPositions.FigurePosition(3);
            end
            
            % Update global font size
            obj.UIProperties.FigureFontSizeHeader = 0.011 * obj.UIPositions.FigurePosition(3);
            obj.UIProperties.FigureFontSizeBody = 0.009 * obj.UIPositions.FigurePosition(3);
            
            % Table positions
            function TablePosition(obj, varargin)
                
                % Table panel width proportional to figure width
                obj.UIPositions.TablePanelWidth =...
                    (obj.UIPositions.FigurePosition(3)/3.75) - obj.UIPositions.Margin;
                
                % Table panel height proportional to figure height
                obj.UIPositions.TablePanelHeight = ...
                    (obj.UIPositions.FigurePosition(4) / 3) - (obj.UIPositions.Margin);
                
                % Table panel left is one margin from left edge
                obj.UIPositions.TablePanelLeft = obj.UIPositions.Margin;
                
                % Table panel top is one margin from top
                obj.UIPositions.TablePanelBottom = ...
                    obj.UIPositions.FigurePosition(4)-...
                    obj.UIPositions.TablePanelHeight - ...
                    obj.UIPositions.Margin;
                
                obj.UIPositions.TablePanelPosition = ...
                    [obj.UIPositions.TablePanelLeft, obj.UIPositions.TablePanelBottom,...
                    obj.UIPositions.TablePanelWidth, obj.UIPositions.TablePanelHeight];
                
                % Set table panel position
                set(obj.UITable.TablePanel, 'Position', obj.UIPositions.TablePanelPosition);
                
                % Table postion properties
                obj.UIPositions.TablePosition = ...
                    [0, 0,...
                    obj.UIPositions.TablePanelWidth - obj.UIPositions.Margin/2,...
                    obj.UIPositions.TablePanelHeight - obj.UIPositions.Margin/2];
                
                set(obj.UITable.Table,...
                    'Position', obj.UIPositions.TablePosition,...
                    'FontSize', obj.UIProperties.FigureFontSizeBody);
                
                % Set column width parameters (10%, 30%, 20%, 20%, 20%)
                obj.UIPositions.TableColumnWidth = ...
                    {obj.UIPositions.TablePosition(3)*0.1,...
                    obj.UIPositions.TablePosition(3)*0.3,...
                    obj.UIPositions.TablePosition(3)*0.2,...
                    obj.UIPositions.TablePosition(3)*0.2,...
                    obj.UIPositions.TablePosition(3)*0.2};
                
                set(obj.UITable.Table, 'ColumnWidth', obj.UIPositions.TableColumnWidth);
            end
            
            TablePosition(obj);
            
            % List box positions
            function ListBoxPosition(obj, varargin)
                
                % Width of listbox panel is equal to width of table panel
                obj.UIPositions.ListBoxPanelWidth = obj.UIPositions.TablePanelWidth;
                
                % Height of listbox panel is equal to height of table panel
                obj.UIPositions.ListBoxPanelHeight = obj.UIPositions.TablePanelHeight;
                
                % Same distance from left edge as table panel
                obj.UIPositions.ListBoxPanelLeft = obj.UIPositions.TablePanelLeft;
                
                % Set position in middle
                obj.UIPositions.ListBoxPanelBottom = ...
                    obj.UIPositions.TablePanelBottom-...
                    obj.UIPositions.TablePanelHeight-...
                    obj.UIPositions.Margin;
                
                obj.UIPositions.ListBoxPanelPosition = ...
                    [obj.UIPositions.ListBoxPanelLeft, obj.UIPositions.ListBoxPanelBottom,...
                    obj.UIPositions.ListBoxPanelWidth, obj.UIPositions.ListBoxPanelHeight];
                
                % Set list box panel position
                set(obj.UITable.ListBoxPanel,...
                    'Position', obj.UIPositions.ListBoxPanelPosition,...
                    'FontSize', obj.UIProperties.FigureFontSizeHeader);
                
                % Set samples list box postion
                obj.UIPositions.AvailableSamplesListBoxPosition = ...
                    [obj.UIPositions.Margin/2,...
                    obj.UIPositions.Margin/1.5,...
                    (obj.UIPositions.ListBoxPanelWidth/2) - (obj.UIPositions.Margin),...
                    obj.UIPositions.ListBoxPanelHeight - (obj.UIPositions.Margin / 0.25)];
                
                set(obj.UITable.AvailableSamplesListBox, 'Position', obj.UIPositions.AvailableSamplesListBoxPosition);
                
                % Set ions list box postion
                obj.UIPositions.AvailableIonsListBoxPosition = ...
                    [obj.UIPositions.ListBoxPanelWidth - (obj.UIPositions.ListBoxPanelWidth/2),...
                    obj.UIPositions.Margin/1.5,...
                    (obj.UIPositions.ListBoxPanelWidth/2) - (obj.UIPositions.Margin),...
                    obj.UIPositions.ListBoxPanelHeight - (obj.UIPositions.Margin/0.25)];
                
                set(obj.UITable.AvailableIonsListBox, 'Position', obj.UIPositions.AvailableIonsListBoxPosition);
            end
            
            ListBoxPosition(obj);
            
            % View options positions
            function ViewOptionsPosition(obj, varargin)
                
                % Width of view options panel is equal to width of table panel
                obj.UIPositions.ViewOptionsPanelWidth = obj.UIPositions.TablePanelWidth;
                
                % Height of view options panel is equal to height of table panel
                obj.UIPositions.ViewOptionsPanelHeight = obj.UIPositions.TablePanelHeight - obj.UIPositions.Margin;
                
                % Same distance from left edge as table panel
                obj.UIPositions.ViewOptionsPanelLeft = obj.UIPositions.TablePanelLeft;
                
                % Set position to bottom of figure
                obj.UIPositions.ViewOptionsPanelBottom = obj.UIPositions.ListBoxPanelBottom - obj.UIPositions.TablePanelHeight;
                
                obj.UIPositions.ViewOptionsPosition = ...
                    [obj.UIPositions.ViewOptionsPanelLeft, obj.UIPositions.ViewOptionsPanelBottom,...
                     obj.UIPositions.ViewOptionsPanelWidth, obj.UIPositions.ViewOptionsPanelHeight];
                
                % Set view options panel position
                set(obj.UITable.ViewOptionsPanel,...
                    'Position', obj.UIPositions.ViewOptionsPosition,...
                    'FontSize', obj.UIProperties.FigureFontSizeHeader);
                
                % Plot overlay/separate axes buttons
                function PlotOverlayPosition(obj, varargin)
                    
                    % Set tempory variables
                    PanelHeight = obj.UIPositions.ViewOptionsPanelHeight;
                    PanelWidth = obj.UIPositions.ViewOptionsPanelWidth;
                
                    % Button Group
                    set(obj.UITable.PlotOverlayOptions,...
                        'Position', [PanelWidth/16,...
                                     PanelHeight/2,...
                                     PanelWidth/2.5,...
                                     PanelHeight/3],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                                    
                    % Button Group Title
                    set(obj.UITable.PlotOverlayOptionsText,...
                        'Position', [PanelWidth/7,...
                                     PanelHeight/3.75,...
                                     PanelWidth/8,...
                                     PanelHeight/9],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Option 1
                    set(obj.UITable.PlotOverlayOptions_Separate,...
                        'Position', [PanelWidth/32,...
                                     PanelHeight/6,...
                                     PanelWidth/3,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);

                    % Option 2
                    set(obj.UITable.PlotOverlayOptions_Overlay,...
                        'Position', [PanelWidth/32,...
                                     PanelHeight/20,...
                                     PanelWidth/3,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                end
                
                % Plot TIC/EIC buttons
                function PlotTICPosition(obj, varargin)
                    
                    % Set tempory variables
                    PanelHeight = obj.UIPositions.ViewOptionsPanelHeight;
                    PanelWidth = obj.UIPositions.ViewOptionsPanelWidth;
                    
                    % Button Group
                    set(obj.UITable.PlotTICOptions,...
                        'Position', [PanelWidth/16,...
                                    PanelHeight/16,...
                                    PanelWidth/2.5,...
                                    PanelHeight/3],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Button Group Title
                    set(obj.UITable.PlotTICOptionsText,...
                        'Position', [PanelWidth/7,...
                                     PanelHeight/3.75,...
                                     PanelWidth/8,...
                                     PanelHeight/9],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Option 1
                    set(obj.UITable.PlotTICOptions_TIC,...
                        'Position', [PanelWidth/32,...
                                     PanelHeight/6,...
                                     PanelWidth/3,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                                
                    % Option 2
                    set(obj.UITable.PlotTICOptions_EIC,...
                        'Position', [PanelWidth/32,...
                                     PanelHeight/20,...
                                     PanelWidth/3,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                end
                
                % Plot all/selected sample buttons
                function PlotAllPosition(obj, varargin)
                    
                    % Set tempory variables
                    PanelHeight = obj.UIPositions.ViewOptionsPanelHeight;
                    PanelWidth = obj.UIPositions.ViewOptionsPanelWidth;
                    
                    % Button Group
                    set(obj.UITable.PlotAllOptions,...
                        'Position', [(PanelWidth/2)+(PanelHeight/32),...
                                    PanelHeight/2,...
                                    PanelWidth/2.5,...
                                    PanelHeight/3],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Button Group Title
                    set(obj.UITable.PlotAllOptionsText,...
                        'Position', [PanelWidth/7,...
                                     PanelHeight/3.75,...
                                     PanelWidth/8,...
                                     PanelHeight/9],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Option 1
                    set(obj.UITable.PlotAllOptions_All,...
                        'Position', [PanelWidth/32,...
                                     PanelHeight/6,...
                                     PanelWidth/3,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                                
                    % Option 2
                    set(obj.UITable.PlotAllOptions_Selected,...
                        'Position', [PanelWidth/32,...
                                     PanelHeight/20,...
                                     PanelWidth/3,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                end
                
                % Plot normalize/same y-scale buttons
                function PlotScalePosition(obj, varargin)
                    
                    % Set tempory variables
                    PanelHeight = obj.UIPositions.ViewOptionsPanelHeight;
                    PanelWidth = obj.UIPositions.ViewOptionsPanelWidth;
                    
                    % Button Group
                    set(obj.UITable.PlotScaleOptions,...
                        'Position', [(PanelWidth/2)+(PanelHeight/32),...
                                    PanelHeight/16,...
                                    PanelWidth/2.5,...
                                    PanelHeight/3],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Button Group Title
                    set(obj.UITable.PlotScaleOptionsText,...
                        'Position', [PanelWidth/7,...
                                     PanelHeight/3.75,...
                                     PanelWidth/8,...
                                     PanelHeight/9],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Option 1
                    set(obj.UITable.PlotScaleOptions_Normalize,...
                        'Position', [PanelWidth/32,...
                                     PanelHeight/6,...
                                     PanelWidth/3,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                                
                    % Option 2
                    set(obj.UITable.PlotScaleOptions_Same,...
                        'Position', [PanelWidth/32,...
                                     PanelHeight/20,...
                                     PanelWidth/3,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                end
                
                PlotOverlayPosition(obj);
                PlotTICPosition(obj);
                PlotAllPosition(obj);
                PlotScalePosition(obj);
                
                function ProcessStatusPositions(obj, varargin)
                    
                    % Set tempory variables
                    PanelHeight = obj.UIPositions.ViewOptionsPanelHeight;
                    PanelWidth = obj.UIPositions.ViewOptionsPanelWidth;

                    % A. Crop Data
                    set(obj.UITable.ProcessStatusCropData,...
                        'Position', [PanelWidth/16,...
                                     PanelHeight-(PanelHeight/5)*1.5,...
                                     PanelWidth/3,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    % B. Baseline Correction
                    set(obj.UITable.ProcessStatusBaselineCorrection,...
                        'Position', [PanelWidth/16,...
                                     PanelHeight-(PanelHeight/5)*2.5,...
                                     PanelWidth/2,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    % C. Peak Detection
                    set(obj.UITable.ProcessStatusPeakDetection,...
                        'Position', [PanelWidth/16,...
                                     PanelHeight-(PanelHeight/5)*3.5,...
                                     PanelWidth/1.8,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    % D. Peak Integration
                    set(obj.UITable.ProcessStatusPeakIntegration,...
                        'Position', [PanelWidth/16,...
                                     PanelHeight-(PanelHeight/5)*4.5,...
                                     PanelWidth/1.8,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                end
  
                ProcessStatusPositions(obj);
                
                function ProcessStatusCounterPositions(obj, varargin)
                    
                    % Set tempory variables
                    PanelHeight = obj.UIPositions.ViewOptionsPanelHeight;
                    PanelWidth = obj.UIPositions.ViewOptionsPanelWidth;
                    
                    % Left positions of sample/ion counters
                    SamplesLeft = PanelWidth/1.5;
                    IonsLeft = PanelWidth/1.3;
                    SeparatorLeft = PanelWidth/1.385;
                    
                    % Text Width
                    TextWidth = PanelWidth/24;
                    
                    % Bottom positions for each stage
                    BottomA = PanelHeight-(PanelHeight/5)*1.5;
                    BottomB = PanelHeight-(PanelHeight/5)*2.5;
                    BottomC = PanelHeight-(PanelHeight/5)*3.5;
                    BottomD = PanelHeight-(PanelHeight/5)*4.5;
                    
                    % A. Crop Data
                    set(obj.UITable.ProcessStatusCropDataSeparatorText,...
                        'Position', [SeparatorLeft,...
                                     BottomA,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    set(obj.UITable.ProcessStatusCropDataIonsRemaining,...
                        'Position', [IonsLeft,...
                                     BottomA,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    set(obj.UITable.ProcessStatusCropDataSamplesRemaining,...
                        'Position', [SamplesLeft,...
                                     BottomA,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    % B. Baseline Correction
                    set(obj.UITable.ProcessStatusBaselineCorrectionSeparatorText,...
                        'Position', [SeparatorLeft,...
                                     BottomB,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    set(obj.UITable.ProcessStatusBaselineCorrectionIonsRemaining,...
                        'Position', [IonsLeft,...
                                     BottomB,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    set(obj.UITable.ProcessStatusBaselineCorrectionSamplesRemaining,...
                        'Position', [SamplesLeft,...
                                     BottomB,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);

                    % C. Peak Detection
                    set(obj.UITable.ProcessStatusPeakDetectionSeparatorText,...
                        'Position', [SeparatorLeft,...
                                     BottomC,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    set(obj.UITable.ProcessStatusPeakDetectionIonsRemaining,...
                        'Position', [IonsLeft,...
                                     BottomC,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    set(obj.UITable.ProcessStatusPeakDetectionSamplesRemaining,...
                        'Position', [SamplesLeft,...
                                     BottomC,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    % D. Peak Integration
                    set(obj.UITable.ProcessStatusPeakIntegrationSeparatorText,...
                        'Position', [SeparatorLeft,...
                                     BottomD,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    set(obj.UITable.ProcessStatusPeakIntegrationIonsRemaining,...
                        'Position', [IonsLeft,...
                                     BottomD,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);
                    
                    set(obj.UITable.ProcessStatusPeakIntegrationSamplesRemaining,...
                        'Position', [SamplesLeft,...
                                     BottomD,...
                                     TextWidth,...
                                     PanelHeight/8],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody*1.2);  
                end
                
                ProcessStatusCounterPositions(obj);
            end
            
            ViewOptionsPosition(obj);
            
            % Axes panel position
            function AxesPosition(obj, varargin)
                
                % Width of axes panel
                obj.UIPositions.AxesPanelWidth = ...
                    obj.UIPositions.FigurePosition(3)-...
                    obj.UIPositions.TablePanelWidth-...
                    3*obj.UIPositions.Margin;
                
                % Height of axes panel
                obj.UIPositions.AxesPanelHeight = ...
                    (obj.UIPositions.FigurePosition(4)/1.25) + (obj.UIPositions.Margin*2);
                
                % Distance from left edge
                obj.UIPositions.AxesPanelLeft = ...
                    obj.UIPositions.TablePanelWidth+...
                    2*obj.UIPositions.Margin;
                
                % Distance from bottom
                obj.UIPositions.AxesPanelBottom = ...
                    obj.UIPositions.FigurePosition(4)-...
                    obj.UIPositions.FigurePosition(4)/1.25-...
                    obj.UIPositions.Margin*3;
                
                obj.UIPositions.AxesPanelPosition = ...
                    [obj.UIPositions.AxesPanelLeft, obj.UIPositions.AxesPanelBottom,...
                    obj.UIPositions.AxesPanelWidth, obj.UIPositions.AxesPanelHeight];
                
                set(obj.UIAxes.AxesPanel, 'Position', obj.UIPositions.AxesPanelPosition);

                % Axes subpanel position (panel will hold axes)
                set(obj.UIAxes.AxesSubPanel,...
                    'Position', [2*obj.UIPositions.Margin,...
                                 2*obj.UIPositions.Margin,...
                                 obj.UIPositions.AxesPanelWidth - 4*obj.UIPositions.Margin,...
                                 obj.UIPositions.AxesPanelHeight - 4*obj.UIPositions.Margin]);
            end
            
            AxesPosition(obj);
            
            % Axes options position
            function AxesOptionsPositions(obj, varargin)
                
                % Axes options panel position
                obj.UIPositions.OptionsPanelPosition = ...
                    [obj.UIPositions.AxesPanelLeft,...
                     obj.UIPositions.Margin,...
                     obj.UIPositions.AxesPanelWidth,...
                     obj.UIPositions.FigurePosition(4) - obj.UIPositions.AxesPanelHeight - 3*obj.UIPositions.Margin];
                 
                set(obj.UIAxes.OptionsPanel, 'Position', obj.UIPositions.OptionsPanelPosition);
                
                function CropFilterPosition(obj, varargin)
                    
                    % Crop Filter - Title
                    set(obj.UIAxes.CropText,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/35,...
                                     (obj.UIPositions.OptionsPanelPosition(4)/2)+(obj.UIPositions.OptionsPanelPosition(4)/4),...
                                     obj.UIPositions.OptionsPanelPosition(3)/6,...
                                     obj.UIPositions.OptionsPanelPosition(4)/6],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Crop Filter - 'Min.'
                    set(obj.UIAxes.CropTextMin,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/28,...
                                     obj.UIPositions.OptionsPanelPosition(4)/10,...
                                     obj.UIPositions.OptionsPanelPosition(3)/20,...
                                     obj.UIPositions.OptionsPanelPosition(4)/5],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % User Input - Minimum Time
                    set(obj.UIAxes.CropEditTextMin,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/24,...
                                     obj.UIPositions.OptionsPanelPosition(4)/2.75,...
                                     obj.UIPositions.OptionsPanelPosition(3)/20,...
                                     obj.UIPositions.OptionsPanelPosition(4)/4.25],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Crop Filter - '-'
                    set(obj.UIAxes.CropTextMiddle,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/10.25,...
                                     obj.UIPositions.OptionsPanelPosition(4)/2.25,...
                                     obj.UIPositions.OptionsPanelPosition(3)/48,...
                                     obj.UIPositions.OptionsPanelPosition(4)/7],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Crop Filter - 'Max.'
                    set(obj.UIAxes.CropTextMax,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/8,...
                                     obj.UIPositions.OptionsPanelPosition(4)/10,...
                                     obj.UIPositions.OptionsPanelPosition(3)/20,...
                                     obj.UIPositions.OptionsPanelPosition(4)/5],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % User Input - Maximum Time
                    set(obj.UIAxes.CropEditTextMax,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/8,...
                                     obj.UIPositions.OptionsPanelPosition(4)/2.75,...
                                     obj.UIPositions.OptionsPanelPosition(3)/20,...
                                     obj.UIPositions.OptionsPanelPosition(4)/4.25],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                end
                
                CropFilterPosition(obj);
                
                function BaselineFilterPositions(obj, varargin)
                    
                    PanelHeight = obj.UIPositions.OptionsPanelPosition(4);
                    PanelWidth = obj.UIPositions.OptionsPanelPosition(3);
                
                    % Baseline parameter sliders
                    set(obj.UIAxes.BaselineSmoothness,...
                        'Position', [(PanelWidth/10.25)*3,...
                                     (PanelHeight/6),...
                                     obj.UIPositions.OptionsPanelPosition(3)/5.5,...
                                     obj.UIPositions.OptionsPanelPosition(4)/5.25]);                
                    
                    set(obj.UIAxes.BaselineAsymmetry,...
                        'Position', [(PanelWidth/10.25)*3,...
                                     3*(PanelHeight/6),...
                                     obj.UIPositions.OptionsPanelPosition(3)/5.5,...
                                     obj.UIPositions.OptionsPanelPosition(4)/5.25]);
                    
                    % Baseline apply
                    set(obj.UIAxes.BaselineApplyButton,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/1.8,...
                                     3*(obj.UIPositions.OptionsPanelPosition(4)/6),...
                                     obj.UIPositions.OptionsPanelPosition(3)/15,...
                                     obj.UIPositions.OptionsPanelPosition(4)/3.75],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Baseline apply all
                    set(obj.UIAxes.ViewBaseline,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/1.8,...
                                     obj.UIPositions.OptionsPanelPosition(4)/6,...
                                     obj.UIPositions.OptionsPanelPosition(3)/15,...
                                     obj.UIPositions.OptionsPanelPosition(4)/3.75],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Smoothness edit text
                    set(obj.UIAxes.BaselineCorrectionSmoothnessText,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/1.165,...
                                     obj.UIPositions.OptionsPanelPosition(4)/3/2,...
                                     obj.UIPositions.OptionsPanelPosition(3)/20,...
                                     obj.UIPositions.OptionsPanelPosition(4)/4.25],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);     
                    
                    % Asymmetry edit text
                    set(obj.UIAxes.BaselineCorrectionAsymmetryText,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/1.165,...
                                     obj.UIPositions.OptionsPanelPosition(4)/2,...
                                     obj.UIPositions.OptionsPanelPosition(3)/20,...
                                     obj.UIPositions.OptionsPanelPosition(4)/4.25],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);     
                    
                    % Baseline correction title text
                    set(obj.UIAxes.BaselineCorrectionText,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/1.48,...
                                     4*(PanelHeight/6),...
                                     obj.UIPositions.OptionsPanelPosition(3)/6,...
                                     obj.UIPositions.OptionsPanelPosition(4)/4.25],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);     
                end
                
                BaselineFilterPositions(obj);
                
                % Peak detection buttons
                function PeakDetectionPositions(obj, varargin)
                    
                    PanelHeight = obj.UIPositions.OptionsPanelPosition(4);
                    PanelWidth = obj.UIPositions.OptionsPanelPosition(3);
                    
                    % Peak detection title text
                    set(obj.UIAxes.PeakDetectionText,...
                        'Position', [PanelWidth/1.57,...
                                     3.5*(PanelHeight/6),...
                                     obj.UIPositions.OptionsPanelPosition(3)/7,...
                                     obj.UIPositions.OptionsPanelPosition(4)/4],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody); 
                    
                    % Peak Detection - 'Apply' button
                    set(obj.UIAxes.PeakDetectionApplyButton,...
                        'Position', [PanelWidth/1.25,...
                                     3*(obj.UIPositions.OptionsPanelPosition(4)/6),...
                                     obj.UIPositions.OptionsPanelPosition(3)/15,...
                                     obj.UIPositions.OptionsPanelPosition(4)/3.75],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Peak Detection - 'Apply All' button
                    set(obj.UIAxes.PeakDetectionViewButton,...
                        'Position', [PanelWidth/1.25,...
                                     obj.UIPositions.OptionsPanelPosition(4)/6,...
                                     obj.UIPositions.OptionsPanelPosition(3)/15,...
                                     obj.UIPositions.OptionsPanelPosition(4)/3.75],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Current Sample ID
                    set(obj.UIAxes.PeakDetectionCurrentSample,...
                        'Position', [PanelWidth/1.55,...
                                     2*(PanelHeight/6),...
                                     obj.UIPositions.OptionsPanelPosition(3)/25,...
                                     obj.UIPositions.OptionsPanelPosition(4)/4.25],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);     
                    
                    % Current Ion
                    set(obj.UIAxes.PeakDetectionCurrentIon,...
                        'Position', [PanelWidth/1.445,...
                                     2*(PanelHeight/6),...
                                     obj.UIPositions.OptionsPanelPosition(3)/25,...
                                     obj.UIPositions.OptionsPanelPosition(4)/4.25],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);     
                    
                    % Peak retention time
                    set(obj.UIAxes.PeakDetectionRetentionTime,...
                        'Position', [PanelWidth/1.35,...
                                     2*(PanelHeight/6),...
                                     obj.UIPositions.OptionsPanelPosition(3)/25,...
                                     obj.UIPositions.OptionsPanelPosition(4)/4.25],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Peak detection sample ID text
                    set(obj.UIAxes.PeakDetectionIDText,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/1.565,...
                                     obj.UIPositions.OptionsPanelPosition(4)/10,...
                                     obj.UIPositions.OptionsPanelPosition(3)/20,...
                                     obj.UIPositions.OptionsPanelPosition(4)/5],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Peak detection ion text
                    set(obj.UIAxes.PeakDetectionIonText,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/1.459,...
                                     obj.UIPositions.OptionsPanelPosition(4)/10,...
                                     obj.UIPositions.OptionsPanelPosition(3)/20,...
                                     obj.UIPositions.OptionsPanelPosition(4)/5],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Peak detection retention text
                    set(obj.UIAxes.PeakDetectionRetentionText,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/1.36,...
                                     obj.UIPositions.OptionsPanelPosition(4)/10,...
                                     obj.UIPositions.OptionsPanelPosition(3)/20,...
                                     obj.UIPositions.OptionsPanelPosition(4)/5],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                end
                
                PeakDetectionPositions(obj, varargin)
                
                % Integrate mode toggle button
                set(obj.UIAxes.ProcessModeToggle,...
                    'Position', [obj.UIPositions.OptionsPanelPosition(3)/1.135,...
                                 obj.UIPositions.OptionsPanelPosition(4)/3,...
                                 obj.UIPositions.OptionsPanelPosition(3)/10,...
                                 obj.UIPositions.OptionsPanelPosition(4)/3],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                function ProcessModeSpecificPositions(obj, varargin)
                    
                    % Apply crop button
                    set(obj.UIAxes.CropApplyButton,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/5,...
                                     3*(obj.UIPositions.OptionsPanelPosition(4)/6),...
                                     obj.UIPositions.OptionsPanelPosition(3)/15,...
                                     obj.UIPositions.OptionsPanelPosition(4)/3.75],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                    
                    % Apply all crop button
                    set(obj.UIAxes.CropApplyAllButton,...
                        'Position', [obj.UIPositions.OptionsPanelPosition(3)/5,...
                                     obj.UIPositions.OptionsPanelPosition(4)/6,...
                                     obj.UIPositions.OptionsPanelPosition(3)/15,...
                                     obj.UIPositions.OptionsPanelPosition(4)/3.75],...
                        'FontSize', obj.UIProperties.FigureFontSizeBody);
                end
                
                ProcessModeSpecificPositions(obj);
            end
            
            AxesOptionsPositions(obj);
        end
        
        % Initialize figure
        function obj = ConstructUIFigure(obj)
            
            % Create figure
            obj.UIFigure = figure();
            
            set(obj.UIFigure,...
                'Units', obj.UIProperties.FigureUnits,...
                'Position', obj.UIPositions.FigurePosition,...
                'MenuBar', 'none',...
                'Resize', 'on',...
                'Color', obj.UIProperties.FigureBackgroundColor,...
                'Name', 'TEXPRESS Toolbox v1.0',...
                'NumberTitle', 'off',...
                'ResizeFcn', @obj.UpdateFigureSize);
        end
        
        % Set menu options
        function obj = ConstructUIMenu(obj)
            
            % File Tab
            obj.UIMenu.FileMenu = uimenu(...
                'Parent', obj.UIFigure,...
                'Label', 'File');
            
            % File Tab --> Load Data
            obj.UIMenu.LoadData = uimenu(...
                'Parent', obj.UIMenu.FileMenu,...
                'Label', 'Load');

            % File Tab --> Load Data --> Import '.CDF'
            obj.UIMenu.LoadCDF = uimenu(...
                'Parent', obj.UIMenu.LoadData,...
                'Label', '.CDF');
            
            % File Tab --> Save Data
            obj.UIMenu.SaveData = uimenu(...
                'Parent', obj.UIMenu.FileMenu,...
                'Label', 'Save');
            
            % File Tab --> Save Data --> Export '.MAT'
            obj.UIMenu.SaveMAT = uimenu(...
                'Parent', obj.UIMenu.SaveData,...
                'Label', '.MAT');
            
            % View Tab
            obj.UIMenu.ViewMenu = uimenu(...
                'Parent', obj.UIFigure,...
                'Label', 'View');
            
            % View Tab - Graph Properties
            obj.UIMenu.Properties = uimenu(...
                'Parent', obj.UIMenu.ViewMenu,...
                'Label', 'Properties');
            
            % View Tab --> Graph Properties --> Line Width
            obj.UIMenu.LineWidth = uimenu(...
                'Parent', obj.UIMenu.Properties,...
                'Label', 'Line Width');
            
            % View Tab --> Graph Properties --> Line Width --> 'Light'
            obj.UIMenu.LineWidthLight = uimenu(...
                'Parent', obj.UIMenu.LineWidth,...
                'Label', 'Light',...
                'Callback', @obj.InitializeViewMenu,...
                'Checked', 'off',...
                'Tag', 'light');
            
            % View Tab --> Graph Properties --> Line Width --> 'Medium'
            obj.UIMenu.LineWidthMedium = uimenu(...
                'Parent', obj.UIMenu.LineWidth,...
                'Label', 'Medium',...
                'Callback', @obj.InitializeViewMenu,...
                'Checked', 'on',...
                'Tag', 'medium');
            
            % View Tab --> Graph Properties --> Line Width --> 'Heavy'
            obj.UIMenu.LineWidthHeavy = uimenu(...
                'Parent', obj.UIMenu.LineWidth,...
                'Label', 'Heavy',...
                'Callback', @obj.InitializeViewMenu,...
                'Checked', 'off',...
                'Tag', 'heavy');
        end
        
        % Build table objects
        function obj = ConstructUITable(obj)
       
            % Create data table (upper-left corner)
            function BuildTable(obj, varargin)
                
                % Create panel to place table
                obj.UITable.TablePanel = uipanel(...
                    'Parent', obj.UIFigure,...
                    'Units', obj.UIProperties.PanelUnits,...                    
                    'BorderType', obj.UIProperties.PanelBorderType ,...
                    'BorderWidth', obj.UIProperties.PanelBorderWidth ,...
                    'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                    'HighlightColor', obj.UIProperties.PanelHighlightColor,...
                    'ForegroundColor', obj.UIProperties.PanelForegroundColor);
            
                obj.UITable.Table = uitable(...
                    'Parent', obj.UITable.TablePanel,...
                    'Units', obj.UIProperties.PanelUnits,...
                    'BackgroundColor', obj.UIProperties.TableBackgroundColor,...
                    'ForegroundColor', obj.UIProperties.TableForegroundColor,...
                    'RowStriping', 'on',...
                    'RowName', [],...
                    'FontUnits', obj.UIProperties.FigureFontUnits,...
                    'FontSize', obj.UIProperties.FigureFontSizeBody,...
                    'FontWeight', obj.UIProperties.FigureWeight,...
                    'FontName', obj.UIProperties.FigureFont,...
                    'CellEditCallback', @obj.UpdateTable,...
                    'ColumnName', {'ID', 'Name', 'Vial', 'Line', 'Trial'},...
                    'ColumnFormat', {'char', 'char', 'char', 'char', 'char'},...
                    'ColumnEditable', [false, true, false, false, false]);
            end
            
            BuildTable(obj);
            
            % Create list box (middle-left)
            function BuildListBox(obj, varargin)
                
                % List box panel
                obj.UITable.ListBoxPanel = uipanel(...
                    'Parent', obj.UIFigure,...
                    'Units', obj.UIProperties.PanelUnits,...
                    'BorderType', obj.UIProperties.PanelBorderType ,...
                    'BorderWidth', obj.UIProperties.PanelBorderWidth ,...
                    'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                    'HighlightColor', obj.UIProperties.PanelHighlightColor,...
                    'ForegroundColor', obj.UIProperties.PanelForegroundColor,...
                    'Title', 'Select View',...
                    'FontWeight', 'Bold',...
                    'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                    'FontUnits', obj.UIProperties.FigureFontUnits,...
                    'FontName',  obj.UIProperties.FigureFont);
                
                % Available samples list box
                obj.UITable.AvailableSamplesListBox = uicontrol(...
                    'Parent', obj.UITable.ListBoxPanel,...
                    'Units', obj.UIProperties.PanelUnits,...
                    'Style', 'List',...
                    'BackgroundColor', 'white');
            
                % Available ions list box
                obj.UITable.AvailableIonsListBox = uicontrol(...
                    'Parent', obj.UITable.ListBoxPanel,...
                    'Units', obj.UIProperties.PanelUnits,...
                    'Style', 'List',...
                    'BackgroundColor', 'white');
            end
            
            BuildListBox(obj);
            
            % Create view options (bottom-left)
            function BuildViewOptions(obj, varargin)
                
                obj.UITable.ViewOptionsPanel = uipanel(...
                    'Units', obj.UIProperties.PanelUnits,...
                    'BorderType', obj.UIProperties.PanelBorderType ,...
                    'BorderWidth', obj.UIProperties.PanelBorderWidth ,...
                    'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                    'HighlightColor', obj.UIProperties.PanelHighlightColor,...
                    'ForegroundColor', obj.UIProperties.PanelForegroundColor,...
                    'Title', 'View Options',...
                    'FontWeight', 'Bold',...
                    'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                    'FontUnits', obj.UIProperties.FigureFontUnits,...
                    'FontName',  obj.UIProperties.FigureFont);
                
                % Plot overlay/separate axes buttons
                function BuildPlotOverlayOptions(obj, varargin)
                    
                    % Button Group #1
                    obj.UITable.PlotOverlayOptions = uibuttongroup(...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'BorderType', 'line',...
                        'BorderWidth', 1,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'HighlightColor', obj.UIProperties.PanelHighlightColor,...
                        'SelectionChangeFcn', @obj.InitializeViewOptions);
                    
                    % Button Group Title
                    obj.UITable.PlotOverlayOptionsText = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UITable.PlotOverlayOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'Axes',...
                        'HorizontalAlignment', 'center',...
                        'FontWeight', 'bold',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor);

                    % Option 1 - Separate Axes
                    obj.UITable.PlotOverlayOptions_Separate = uicontrol(...
                        'Parent', obj.UITable.PlotOverlayOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'Style', 'radiobutton',...
                        'String', 'Separated',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'tag', 'separatebutton');
                    
                    % Option 2 - Single Axes
                    obj.UITable.PlotOverlayOptions_Overlay = uicontrol(...
                        'Parent', obj.UITable.PlotOverlayOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'Style', 'radiobutton',...
                        'String', 'Overlaid',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'tag', 'overlaybutton');
                end
                
                % Plot TIC/EIC buttons
                function BuildPlotTICOptions(obj, varargin)
                    
                    % Button Group #2
                    obj.UITable.PlotTICOptions = uibuttongroup(...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'BorderType', 'line',...
                        'BorderWidth', 1,...
                        'HighlightColor', obj.UIProperties.PanelHighlightColor,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'SelectionChangeFcn', @obj.InitializeViewOptions);
                   
                    % Button Group Title
                    obj.UITable.PlotTICOptionsText = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UITable.PlotTICOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'Data',...
                        'FontWeight', 'bold',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor);
                    
                    % Option 1 - Total Ion Chromatograms 
                    obj.UITable.PlotTICOptions_TIC = uicontrol(...
                        'Parent', obj.UITable.PlotTICOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'Style', 'radiobutton',...
                        'String', 'TIC',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'tag', 'ticbutton');
                    
                    % Option 2 - Extracted Ion Chromatograms 
                    obj.UITable.PlotTICOptions_EIC = uicontrol(...
                        'Parent', obj.UITable.PlotTICOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'Style', 'radiobutton',...
                        'String', 'EIC',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'tag', 'ionsbutton'); 
                end
                
                % Plot all/selected sample buttons
                function BuildPlotAllOptions(obj, varargin)
                   
                    % Button Group #3
                    obj.UITable.PlotAllOptions = uibuttongroup(...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'BorderType', 'line',...
                        'BorderWidth', 1,...
                        'HighlightColor', obj.UIProperties.PanelHighlightColor,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'SelectionChangeFcn', @obj.InitializeViewOptions);
               
                    % Button Group Title
                    obj.UITable.PlotAllOptionsText = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UITable.PlotAllOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'Show',...
                        'FontWeight', 'bold',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor);
                    
                    % Option 1 - Total Ion Chromatograms 
                    obj.UITable.PlotAllOptions_All = uicontrol(...
                        'Parent', obj.UITable.PlotAllOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'Style', 'radiobutton',...
                        'String', 'All',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'tag', 'allbutton');
                    
                    % Option 2 - Extracted Ion Chromatograms 
                    obj.UITable.PlotAllOptions_Selected = uicontrol(...
                        'Parent', obj.UITable.PlotAllOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'Style', 'radiobutton',...
                        'String', 'Selected',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'tag', 'selectedbutton');
                end
                
                % Plot y-scale buttons
                function BuildPlotScaleOptions(obj, varargin)
                    
                    % Button Group #4
                    obj.UITable.PlotScaleOptions = uibuttongroup(...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'BorderType', 'line',...
                        'BorderWidth', 1,...
                        'HighlightColor', obj.UIProperties.PanelHighlightColor,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'SelectionChangeFcn', @obj.InitializeViewOptions);
             
                    % Button Group Title
                    obj.UITable.PlotScaleOptionsText = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UITable.PlotScaleOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'Scale',...
                        'FontWeight', 'bold',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor);
                    
                    % Option 1 - Single y-scale 
                    obj.UITable.PlotScaleOptions_Same = uicontrol(...
                        'Parent', obj.UITable.PlotScaleOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'Style', 'radiobutton',...
                        'String', 'Same',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'tag', 'samescalebutton');
                    
                    % Option 2 - Normalized y-scale
                    obj.UITable.PlotScaleOptions_Normalize = uicontrol(...
                        'Parent', obj.UITable.PlotScaleOptions,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'Style', 'radiobutton',...
                        'String', 'Normalize',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'tag', 'normalizescalebutton');
                end
                
                BuildPlotOverlayOptions(obj);
                BuildPlotTICOptions(obj);
                BuildPlotAllOptions(obj);
                BuildPlotScaleOptions(obj);
                
                % Display count on samples processed/to-go
                function BuildProcessStatus(obj, varargin)
                  
                    % A. Crop Data
                    obj.UITable.ProcessStatusCropData = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'A. Crop Data',...
                        'FontWeight', 'demi',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'HorizontalAlignment', 'left',...
                        'Visible', 'off');
                    
                    % Crop Data - Samples/Ions Remaining
                    function ProcessStatusCropDataRemaining(obj, varargin)
                        
                        % Samples remaining
                        obj.UITable.ProcessStatusCropDataSamplesRemaining = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '0',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');
                        
                        % Ions remaining
                        obj.UITable.ProcessStatusCropDataIonsRemaining = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '0',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');

                        % Separator text
                        obj.UITable.ProcessStatusCropDataSeparatorText = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '/',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');
                    end
                    
                    ProcessStatusCropDataRemaining(obj);
                    
                    % B. Baseline Correction
                    obj.UITable.ProcessStatusBaselineCorrection = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'B. Baseline Correction',...
                        'FontWeight', 'demi',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'HorizontalAlignment', 'left',...
                        'Visible', 'off');
                    
                    function ProcessStatusBaselineCorrectionRemaining(obj, varargin)
                        
                        % Samples remaining
                        obj.UITable.ProcessStatusBaselineCorrectionSamplesRemaining = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '0',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');
                        
                        % Ions remaining
                        obj.UITable.ProcessStatusBaselineCorrectionIonsRemaining = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '0',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');

                        % Separator text
                        obj.UITable.ProcessStatusBaselineCorrectionSeparatorText = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '/',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');
                    end
                    
                    ProcessStatusBaselineCorrectionRemaining(obj);
                    
                    % C. Peak Detection
                    obj.UITable.ProcessStatusPeakDetection = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'C. Peak Detection',...
                        'FontWeight', 'demi',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'HorizontalAlignment', 'left',...
                        'Visible', 'off');
                    
                    function ProcessStatusPeakDetectionRemaining(obj, varargin)
 
                        % Samples remaining
                        obj.UITable.ProcessStatusPeakDetectionSamplesRemaining = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '0',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');
                        
                        % Ions remaining
                        obj.UITable.ProcessStatusPeakDetectionIonsRemaining = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '0',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');

                        % Separator text
                        obj.UITable.ProcessStatusPeakDetectionSeparatorText = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '/',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');
                        
                    end
                    
                    ProcessStatusPeakDetectionRemaining(obj);

                    % D. Peak Integration
                    obj.UITable.ProcessStatusPeakIntegration = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'D. Peak Integration',...
                        'FontWeight', 'demi',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'HorizontalAlignment', 'left',...
                        'Visible', 'off');
                    
                    function ProcessStatusPeakIntegrationRemaining(obj, varargin)
                        
                        % Samples remaining
                        obj.UITable.ProcessStatusPeakIntegrationSamplesRemaining = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '0',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');
                        
                        % Ions remaining
                        obj.UITable.ProcessStatusPeakIntegrationIonsRemaining = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '0',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');

                        % Separator text
                        obj.UITable.ProcessStatusPeakIntegrationSeparatorText = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UITable.ViewOptionsPanel,...
                            'Units', obj.UIProperties.PanelUnits,...
                            'String', '/',...
                            'FontWeight', 'bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'HorizontalAlignment', 'left',...
                            'Visible', 'off');
                    end
                    
                    ProcessStatusPeakIntegrationRemaining(obj);
                end
                
                BuildProcessStatus(obj, varargin);  
            end
            
            BuildViewOptions(obj);
        end
        
        % Build axes objects
        function obj = ConstructUIAxes(obj)
            
            % Create axes panel
            function BuildAxesPanel(obj, varargin)
                
                % Create panel to place axes
                obj.UIAxes.AxesPanel = uipanel(...
                    'Parent', obj.UIFigure,...
                    'Units', obj.UIProperties.FigureUnits,...
                    'BorderType', obj.UIProperties.PanelBorderType ,...
                    'BorderWidth', obj.UIProperties.PanelBorderWidth ,...
                    'BackgroundColor', obj.UIProperties.AxesBackgroundColor,...
                    'HighlightColor', obj.UIProperties.PanelHighlightColor,...
                    'ForegroundColor', obj.UIProperties.PanelForegroundColor);
                
                % Create panel to hold axes
                obj.UIAxes.AxesSubPanel = uipanel(...
                    'Parent', obj.UIAxes.AxesPanel,...
                    'Units', obj.UIProperties.FigureUnits,...
                    'BorderType', 'none',...
                    'BackgroundColor', obj.UIProperties.AxesBackgroundColor);
            end
            
            BuildAxesPanel(obj);
            
            % Create axes options panel
            function BuildAxesOptions(obj, varargin)
                
                % Create panel to place axes options components
                obj.UIAxes.OptionsPanel = uipanel(...
                    'Parent', obj.UIFigure,...
                    'Units', obj.UIProperties.FigureUnits,...
                    'BorderType', obj.UIProperties.PanelBorderType ,...
                    'BorderWidth', obj.UIProperties.PanelBorderWidth ,...
                    'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                    'HighlightColor', obj.UIProperties.PanelHighlightColor,...
                    'ForegroundColor', obj.UIProperties.PanelForegroundColor);
                
                % Crop filter components
                function BuildCropFilter(obj, varargin)
                    
                    % User Input - Minimum Time
                    obj.UIAxes.CropEditTextMin = uicontrol(...
                        'Style', 'edit',...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.FigureUnits,...
                        'String', [],...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'HorizontalAlignment', 'center',...
                        'Callback', @obj.InitializeCropFilter);
                    
                    % User Input - Maximum Time
                    obj.UIAxes.CropEditTextMax = uicontrol(...
                        'Style', 'edit',...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.FigureUnits,...
                        'String', [],...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'HorizontalAlignment', 'center',...
                        'Callback', @obj.InitializeCropFilter);
                    
                    % Crop Filter - 'Apply' button
                    obj.UIAxes.CropApplyButton = uicontrol(...
                        'Style', 'pushbutton',...
                        'Value', 0,...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.FigureUnits,...
                        'String', 'Apply',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'Callback', @obj.UpdateCropFilter,...
                        'Visible', 'on',...
                        'SelectionHighlight', 'off');
                    
                    % Crop Filter - 'ApplyAll' button
                    obj.UIAxes.CropApplyAllButton = uicontrol(...
                        'Style', 'pushbutton',...
                        'Value', 0,...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.FigureUnits,...
                        'String', 'Apply All',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'Callback', @obj.UpdateAllCropFilter,...
                        'Visible', 'on',...
                        'SelectionHighlight', 'on');
                    
                    % Add Text Components
                    function BuildCropFilterText(obj, varargin)
                        
                        % Crop Filter - Title
                        obj.UIAxes.CropText = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UIAxes.OptionsPanel,...
                            'Units', obj.UIProperties.FigureUnits,...
                            'String', 'Crop Filter',...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'FontWeight', 'Bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'HorizontalAlignment', 'center');
                        
                        % Crop Filter - 'Min.'
                        obj.UIAxes.CropTextMin = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UIAxes.OptionsPanel,...
                            'Units', obj.UIProperties.FigureUnits,...
                            'String', 'Min.',...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'FontWeight', 'Bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'HorizontalAlignment', 'center');
                        
                        % Crop Filter - '-'
                        obj.UIAxes.CropTextMiddle = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UIAxes.OptionsPanel,...
                            'Units', obj.UIProperties.FigureUnits,...
                            'String', '-',...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'FontWeight', 'Bold',...
                        	'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'HorizontalAlignment', 'center');
                        
                        % Crop Filter - 'Max.'
                        obj.UIAxes.CropTextMax = uicontrol(...
                            'Style', 'text',...
                            'Parent', obj.UIAxes.OptionsPanel,...
                            'Units', obj.UIProperties.FigureUnits,...
                            'String', 'Max.',...
                            'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                            'FontWeight', 'Bold',...
                            'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontName',  obj.UIProperties.FigureFont,...
                            'HorizontalAlignment', 'center');
                    end
                    
                    BuildCropFilterText(obj);
                end
                
                BuildCropFilter(obj);    
                
                % Baseline parameter sliders and related
                function BuildBaselineFilter(obj, varargin)
                    
                    % Slider to adjust baseline smoothness parameter
                    obj.UIAxes.BaselineSmoothness = uicontrol(...
                        'Style', 'slider',...
                        'Min', 1,...
                        'Max', 10,...
                        'Value', 5,...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.FigureUnits,...
                        'Callback', @obj.UpdateBaselineSlider);
                    
                    % Slider to adjust baseline asymmetry factor
                    obj.UIAxes.BaselineAsymmetry = uicontrol(...
                        'Style', 'slider',...
                        'Min', 1,...
                        'Max', 10,...
                        'Value', 5,...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.FigureUnits,...
                        'Callback', @obj.UpdateBaselineSlider);
                    
                    % Baseline Correction - 'Apply' button
                    obj.UIAxes.BaselineApplyButton = uicontrol(...
                        'Style', 'pushbutton',...
                        'Value', 0,...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.FigureUnits,...
                        'String', 'Apply',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'Callback', @obj.UpdateBaselineApply,...
                        'Visible', 'on',...
                        'SelectionHighlight', 'off');
                    
                    % Baseline Correction - 'View' button
                    obj.UIAxes.ViewBaseline = uicontrol(...
                        'Style', 'togglebutton',...
                        'Value', 0,...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.FigureUnits,...
                        'String', 'Show',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'Callback', @obj.ViewBaselineCorrection,...
                        'Visible', 'on',...
                        'SelectionHighlight', 'off');
                    
                    % Smoothness edit text
                    obj.UIAxes.BaselineCorrectionSmoothnessText = uicontrol(...
                        'Style', 'edit',...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', '5',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'Callback', @obj.UpdateBaselineText,...
                        'Visible', 'on');
                    
                    % Asymmetry edit text
                    obj.UIAxes.BaselineCorrectionAsymmetryText = uicontrol(...
                        'Style', 'edit',...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', '5',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'Callback', @obj.UpdateBaselineText,...
                        'Visible', 'on');
                    
                    % Baseline correction title text
                    obj.UIAxes.BaselineCorrectionText = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UITable.ViewOptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'Baseline Correction',...
                        'FontWeight', 'bold',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'HorizontalAlignment', 'center',...
                        'Visible', 'on');
                end
                
                BuildBaselineFilter(obj);
                
                % Peak detection buttons
                function BuildPeakDetector(obj, varargin)
                    
                    % Current Sample ID
                    obj.UIAxes.PeakDetectionCurrentSample = uicontrol(...
                        'Style', 'edit',...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', '',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'Callback', @obj.UpdatePeakDetectionText,...
                        'Visible', 'on');
                    
                    % Current Ion
                    obj.UIAxes.PeakDetectionCurrentIon = uicontrol(...
                        'Style', 'edit',...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', '',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'Callback', @obj.UpdatePeakDetectionText,...
                        'Visible', 'on');
                    
                    % Peak retention time
                    obj.UIAxes.PeakDetectionRetentionTime = uicontrol(...
                        'Style', 'edit',...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', '',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'Callback', @obj.UpdatePeakDetectionPeakText,...
                        'Visible', 'on');
                    
                    % Peak detection title text
                    obj.UIAxes.PeakDetectionText = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'Peak Detection',...
                        'FontWeight', 'bold',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'HorizontalAlignment', 'center',...
                        'Visible', 'on');
                    
                    % Peak detection sample ID text
                    obj.UIAxes.PeakDetectionIDText = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'ID',...
                        'FontWeight', 'bold',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'HorizontalAlignment', 'center',...
                        'Visible', 'on');
                    
                    % Peak detection ion text
                    obj.UIAxes.PeakDetectionIonText = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'm/z',...
                        'FontWeight', 'bold',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'HorizontalAlignment', 'center',...
                        'Visible', 'on');
                    
                    % Peak detection retention text
                    obj.UIAxes.PeakDetectionRetentionText = uicontrol(...
                        'Style', 'text',...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.PanelUnits,...
                        'String', 'time',...
                        'FontWeight', 'bold',...
                        'FontSize',  obj.UIProperties.FigureFontSizeHeader,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'BackgroundColor', obj.UIProperties.PanelBackgroundColor,...
                        'HorizontalAlignment', 'center',...
                        'Visible', 'on');
                    
                    % Peak Detection - 'Apply' button
                    obj.UIAxes.PeakDetectionApplyButton = uicontrol(...
                        'Style', 'pushbutton',...
                        'Value', 0,...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.FigureUnits,...
                        'String', 'Apply',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'Callback', @obj.UpdatePeakDetectionApply,...
                        'Visible', 'on',...
                        'SelectionHighlight', 'off');
                    
                    % Peak Detection - view button
                    obj.UIAxes.PeakDetectionViewButton = uicontrol(...
                        'Style', 'togglebutton',...
                        'Value', 0,...
                        'Parent', obj.UIAxes.OptionsPanel,...
                        'Units', obj.UIProperties.FigureUnits,...
                        'String', 'Show',...
                        'FontWeight', 'normal',...
                        'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                        'FontUnits', obj.UIProperties.FigureFontUnits,...
                        'FontName',  obj.UIProperties.FigureFont,...
                        'Callback', @obj.ViewPeakDetection,...
                        'Visible', 'on',...
                        'SelectionHighlight', 'off');
                end
                
                BuildPeakDetector(obj);
                
                % Toggle process mode 'on'
                obj.UIAxes.ProcessModeToggle = uicontrol(...
                    'Style', 'pushbutton',...
                    'Value', 0,...
                    'Parent', obj.UIAxes.OptionsPanel,...
                    'Units', obj.UIProperties.FigureUnits,...
                    'String', 'Integrate',...
                    'FontWeight', 'bold',...
                    'FontSize',  obj.UIProperties.FigureFontSizeBody,...
                    'FontUnits', obj.UIProperties.FigureFontUnits,...
                    'FontName',  obj.UIProperties.FigureFont,...
                    'Callback', @obj.UpdatePeakIntegration);
            end
            
            BuildAxesOptions(obj);
        end
        
        % Functions for view menu callback
        function InitializeViewMenu(obj, varargin)
           
            % Turn off all line width selections
            set(obj.UIMenu.LineWidthLight, 'Checked', 'off');
            set(obj.UIMenu.LineWidthMedium, 'Checked', 'off');
            set(obj.UIMenu.LineWidthHeavy, 'Checked', 'off');

            % Get tag of selected menu item
            SelectedLineWidth = get(gcbo, 'Tag');
            
            % Execute the following
            switch SelectedLineWidth
                
                case 'light'
                    set(obj.UIMenu.LineWidthLight, 'Checked', 'on');
                    obj.UIProperties.LineWidth = 0.25;
                    
                case 'medium'
                    set(obj.UIMenu.LineWidthMedium, 'Checked', 'on');
                    obj.UIProperties.LineWidth = 1.25;
                    
                case 'heavy'
                    set(obj.UIMenu.LineWidthHeavy, 'Checked', 'on');
                    obj.UIProperties.LineWidth = 2.25;
            end
            
            % Set plot data line width to new value
            if isempty(obj.UIAxes.SingleAxesPlot) == 0
                UpdateAxes(obj);
            end
            
            if isempty(obj.UIAxes.MultipleAxesPlot) == 0
                UpdateAxes(obj);
            end
        end
        
        % Set table data after import
        function InitializeTableData(obj)

            % Check for existing table data
            obj.UITable.TableData = get(obj.UITable.Table, 'Data');

            % Determine how many rows are currently present in table
            obj.UITable.TableDataRows = ...
                max(max(size(get(obj.UITable.TableData, 'RowName')),...
                max(size(obj.UITable.TableData))));

            % Execute the following if table is empty
            if obj.UITable.TableDataRows == 0

                for i = 1:length(obj.PlotData);

                    % Set first column values to 'ID'
                    obj.UITable.TableData{i,1} = i;
                    obj.PlotData(1,i,1).ID = i;

                    % Set second column values to filename
                    obj.UITable.TableData{i,2} = obj.PlotData(1,i,1).Name(1:end-4);
                    obj.PlotData(1,i,1).Name = obj.PlotData(1,i,1).Name(1:end-4);

                    % Set third column values to 'Vial#'
                    obj.UITable.TableData{i,3} = obj.PlotData(1,i,1).Name(1:3);

                    % Set fourth column values to 'Line#'
                    obj.UITable.TableData{i, 4} = obj.PlotData(1,i,1).Name(5:6);

                    % Set fifth column values to 'true' (Checkbox: Enabled) 
                    obj.UITable.TableData{i, 5} = obj.PlotData(1,i,1).Name(8);                        
                end
                
                set(obj.UITable.Table, 'Data', obj.UITable.TableData);
            else

                set(obj.UITable.Table, 'Data', obj.UITable.TableData);
            end                       
        end
        
        % Set available ions in corresponding list box
        function InitializeIonListBox(obj)
           
            % Determine which ions are available
            IonList = [];
            
            % Check the first three samples for available ions
            if length(obj.PlotData(:)) >= 2 
                for i = 1:length(obj.PlotData)
                    for j = 1:length(obj.PlotData(i).IntensityValues(1,:))
                        if max(obj.PlotData(i).IntensityValues(:,j)) > 0
                            IonList = [IonList, j];
                        end 
                    end
                    obj.PlotData(i).Ions = IonList;
                end
            else
                for j = 1:length(obj.PlotData(1).IntensityValues(1,:))
                    if max(obj.PlotData(1).IntensityValues(:,j)) > 0
                        IonList = [IonList, j];
                    end
                end
                obj.PlotData(1).Ions = IonList;
            end
            
            % Sort available ions by increasing value
            IonList = unique(IonList, 'sorted');
              
            % Store available ion list
            obj.UITable.AvailableIonsList = num2cell(IonList);
           
            % Filter available ions by common GDGTs
            for i = 1:length(obj.UITable.AvailableIonsList(1,:))
                
                % Store name of ion in second row
                switch obj.UITable.AvailableIonsList{1,i}
                    
                    % Branched GDGTs
                    case 1022
                        obj.UITable.AvailableIonsList{2,i} = 'bGDGT - Ia (1022)';
                        obj.UITable.AvailableIonsList{3,i} = [0.0, 0.2, 0.5];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1020
                        obj.UITable.AvailableIonsList{2,i} = 'bGDGT - Ib (1020)';
                        obj.UITable.AvailableIonsList{3,i} = [0.0, 0.3, 0.9];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1018
                        obj.UITable.AvailableIonsList{2,i} = 'bGDGT - Ic (1018)';
                        obj.UITable.AvailableIonsList{3,i} = [0.0, 0.7, 1.0];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1036
                        obj.UITable.AvailableIonsList{2,i} = 'bGDGT - IIa (1036)';
                        obj.UITable.AvailableIonsList{3,i} = [0.6, 0.0, 0.0];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1034
                        obj.UITable.AvailableIonsList{2,i} = 'bGDGT - IIb (1034)';
                        obj.UITable.AvailableIonsList{3,i} = [1.0, 0.0, 0.0];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1032
                        obj.UITable.AvailableIonsList{2,i} = 'bGDGT - IIc (1032)';
                        obj.UITable.AvailableIonsList{3,i} = [1.0, 0.5, 0.5];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1050
                        obj.UITable.AvailableIonsList{2,i} = 'bGDGT - IIIa (1050)';
                        obj.UITable.AvailableIonsList{3,i} = [0.0, 0.5, 0.0];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1048
                        obj.UITable.AvailableIonsList{2,i} = 'bGDGT - IIIb (1048)';
                        obj.UITable.AvailableIonsList{3,i} = [0.0, 0.8, 0.0];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1046
                        obj.UITable.AvailableIonsList{2,i} = 'bGDGT - IIIc (1046)';
                        obj.UITable.AvailableIonsList{3,i} = [0.5, 1.0, 0.5];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    
                    % Isoprenoid GDGTs
                    case 1302
                        obj.UITable.AvailableIonsList{2,i} = 'iGDGT - 0 (1302)';
                        obj.UITable.AvailableIonsList{3,i} = [0.0, 0.0, 0.0];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1300
                        obj.UITable.AvailableIonsList{2,i} = 'iGDGT - 1 (1300)';
                        obj.UITable.AvailableIonsList{3,i} = [0.25, 0.35, 0.5];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1298
                        obj.UITable.AvailableIonsList{2,i} = 'iGDGT - 2 (1298)';
                        obj.UITable.AvailableIonsList{3,i} = [0.0, 0.4, 0.3];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1296
                        obj.UITable.AvailableIonsList{2,i} = 'iGDGT - 3 (1296)';
                        obj.UITable.AvailableIonsList{3,i} = [0.5, 0.2, 0.2];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1294
                        obj.UITable.AvailableIonsList{2,i} = 'iGDGT - 4 (1294)';
                        obj.UITable.AvailableIonsList{3,i} = [0.5, 0.5, 0.2];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    case 1292
                        obj.UITable.AvailableIonsList{2,i} = 'iGDGT - Cren. (1292)';
                        obj.UITable.AvailableIonsList{3,i} = [0.5, 0.0, 0.5];
                        obj.UITable.AvailableIonsList{4,i} = i;
                        
                    % Other
                    case 744
                        obj.UITable.AvailableIonsList{2,i} = 'C44 - Std. (744)';
                        obj.UITable.AvailableIonsList{3,i} = [0.0, 0.3, 0.9];
                        obj.UITable.AvailableIonsList{4,i} = i;
                    
                    % Exclude items not on the above lists
                    otherwise
                        obj.UITable.AvailableIonsList{1,i} = [];
                        obj.UITable.AvailableIonsList{2,i} = [];
                        obj.UITable.AvailableIonsList{3,i} = [];
                        obj.UITable.AvailableIonsList{4,i} = [];
                end
            end
            
            obj.UIProperties.TotalIons = length(obj.UITable.AvailableIonsList(1,:));
            
            set(obj.UITable.AvailableIonsListBox,...
                'String', obj.UITable.AvailableIonsList(2,:),...
                'Min', 0,...
                'Max', length(obj.UITable.AvailableIonsList(1,:)));   
            
            drawnow;
        end
        
        % Set available samples in corresponding list box
        function InitializeSampleListBox(obj)
                       
            for i = 1:length(obj.PlotData)
                SamplesList{i} = obj.PlotData(i).Name;
            end
            
            % Set available samples list
            obj.UITable.AvailableSamplesList = unique(SamplesList, 'stable');
            
            % Update user interface list box values
            set(obj.UITable.AvailableSamplesListBox,...
                'String', obj.UITable.AvailableSamplesList,...
                'Min', 0,...
                'Max', length(obj.PlotData));
            
            drawnow;
            
            % Set total number of samples imported
            obj.UIProperties.TotalSamples = length(obj.UITable.AvailableSamplesList);
        end
 
        % Set crop filter functionality
        function InitializeCropFilter(obj, varargin)
            
            % Determine max/min time values from current settings
            MinText = str2double(get(obj.UIAxes.CropEditTextMin, 'String'));
            MaxText = str2double(get(obj.UIAxes.CropEditTextMax, 'String'));
            
            % Case 1: Valid input values
            if MinText >= 0.00 && MinText < MaxText && MaxText < obj.UIProperties.GlobalXMax
                obj.UIProperties.CropMin = MinText;
                obj.UIProperties.CropMax = MaxText;
                set(obj.UIAxes.CropEditTextMin, 'String', num2str(MinText, '%6.2f'));
                set(obj.UIAxes.CropEditTextMax, 'String', num2str(MaxText, '%6.2f'));
                    
            % Case 2: Invalid input minimum (less than zero)
            elseif MinText < 0.00
                obj.UIProperties.CropMin = 0.00;
                set(obj.UIAxes.CropEditTextMin, 'String', '0.00');
                    
            % Case 3: Invalid input minimum (greater than current max)
            elseif MinText >= MaxText
                set(obj.UIAxes.CropEditTextMin, 'String', num2str(obj.UIProperties.CropMin, '%6.2f'));
                set(obj.UIAxes.CropEditTextMax, 'String', num2str(obj.UIProperties.CropMax, '%6.2f'));
                                
            % Case 4: Invalid input maximum (greater than global maximum)
            elseif MaxText >= obj.UIProperties.GlobalXMax
                obj.UIProperties.CropMax = obj.UIProperties.GlobalXMax;
                set(obj.UIAxes.CropEditTextMax, 'String', num2str(obj.UIProperties.GlobalXMax, '%6.2f'));
            end
            
            % Determine which axes to set x limits on
            switch obj.UIProperties.PlotOverlay
                
                case 'on'
                    % Set x axes limits on single axes
                    set(obj.UIAxes.SingleAxes{1}, ...
                        'XLim', [obj.UIProperties.CropMin, obj.UIProperties.CropMax]);
                
                case 'off'
                    % Set x axes limits on multiple axes
                    for i = 1:length(obj.UIAxes.MultipleAxes)
                        set(obj.UIAxes.MultipleAxes{i},...
                            'XLim', [obj.UIProperties.CropMin, obj.UIProperties.CropMax]);
                    end
            end
        end
        
        % Set crop filter data
        function InitializeCropFilterData(obj, varargin)
            
            % Assign crop values to on-screen data
            for i = 1:length(obj.PlotData)
            
                % Get current crop setting
                MinCrop = min(obj.PlotData(i).TimeValues);
                MaxCrop = max(obj.PlotData(i).TimeValues);
            
                obj.UserCrop{obj.PlotData(i).ID,1} = MinCrop;
                obj.UserCrop{obj.PlotData(i).ID,2} = MaxCrop;
                
                % Set table data values for crop
                obj.UITable.TableData{obj.PlotData(i).ID, 6} = num2str(MinCrop, '%6.2f');
                obj.UITable.TableData{obj.PlotData(i).ID, 7} = num2str(MaxCrop, '%6.2f');
            end
            
            set(obj.UITable.Table,...
                'ColumnName', {'ID', 'Name', 'Vial', 'Line', 'Trial',...
                               'Crop Min.', 'Crop Max.'},...
                'ColumnFormat', {'char', 'char', 'char', 'char', 'char',...
                               'char', 'char'},...
                'ColumnEditable', [false, true, false, false, false, false, false],...
                'Data', obj.UITable.TableData);
            
            % Set column width parameters (10%, 30%, 20%, 20%, 20%)
                obj.UIPositions.TableColumnWidth = ...
                    {obj.UIPositions.TablePosition(3)*0.1,...
                    obj.UIPositions.TablePosition(3)*0.3,...
                    obj.UIPositions.TablePosition(3)*0.2,...
                    obj.UIPositions.TablePosition(3)*0.2,...
                    obj.UIPositions.TablePosition(3)*0.2,...
                    obj.UIPositions.TablePosition(3)*0.2,...
                    obj.UIPositions.TablePosition(3)*0.2};
                
                set(obj.UITable.Table, 'ColumnWidth', obj.UIPositions.TableColumnWidth);
        end
        
        % Setup intial axes with imported data
        function InitializeAxes(obj)
            
            % Determine total number of plots
            obj.UIProperties.CurrentPlots = obj.UIProperties.TotalSamples;
              
            % Determine max/min XY value of all samples
            for i = 1:obj.UIProperties.TotalSamples
                
                % Maximum XY values of sample 'i'
                xMax = max(obj.PlotData(i).TimeValues);
                yMin = min(obj.PlotData(i).TotalIntensityValues);
                yMax = max(obj.PlotData(i).TotalIntensityValues);
                
                % Compare xMax to current global x maximum
                if xMax > obj.UIProperties.GlobalXMax
                    
                    % Set new global maximum if greater than current value 
                    obj.UIProperties.GlobalXMax = xMax; 
                end
                
                % Compare yMax to current global y maximum
                if yMax > obj.UIProperties.GlobalYMax
                    
                    % Set new global maximum if greater than current value 
                    obj.UIProperties.GlobalYMax = yMax; 
                end
                
                % Save max/min Y value of each sample TIC
                obj.UIProperties.YMin{i} = yMin;
                obj.UIProperties.YMax{i} = yMax;
            end
            
            % Build multiple axes
            MultipleAxes(obj);

            % Plot the imported data 
            for i = 1:obj.UIProperties.TotalSamples

                % Plot TIC on separate axes
                obj.UIAxes.MultipleAxesPlot{i} = plot(...
                    obj.PlotData(i).TimeValues, obj.PlotData(i).TotalIntensityValues,...
                    'Parent', obj.UIAxes.MultipleAxes{i},...
                    'LineSmoothing', 'on',...
                    'Color', 'black',...
                    'Linewidth', 1.25,...
                    'YLimInclude', 'off');

                % Set axes limits for individual axes
                set(obj.UIAxes.MultipleAxes{i},...
                    'XLim', [0, obj.UIProperties.GlobalXMax]);
                   
                % Update window
                drawnow;
                
                % Set the active plot data to all TICs
                obj.ActivePlotData(i).Name = obj.PlotData(i).Name;
                obj.ActivePlotData(i).XValues = obj.PlotData(i).TimeValues;
                obj.ActivePlotData(i).YValues = obj.PlotData(i).TotalIntensityValues;
                obj.ActivePlotData(i).ID = obj.PlotData(i).ID;
            end

            set(obj.UIAxes.MultipleAxes{obj.UIProperties.CurrentPlots},...
                'Visible', 'on',...
                'LineWidth', 1.15);
            
            % Set minimum value for crop filter
            obj.UIProperties.CropMin = 0;
            set(obj.UIAxes.CropEditTextMin, 'String', num2str(obj.UIProperties.CropMin, '%6.2f'));
            
            % Set maximum value for crop filter
            obj.UIProperties.CropMax = obj.UIProperties.GlobalXMax;
            set(obj.UIAxes.CropEditTextMax, 'String', num2str(obj.UIProperties.CropMax, '%6.2f'));
            
            % Set crop filter data
            InitializeCropFilterData(obj);
            
            % Initialize callbacks for selecting listbox items
            set(obj.UITable.AvailableSamplesListBox,...
                'Callback', @obj.UpdateAxes);
           
            set(obj.UITable.AvailableIonsListBox,...
                'Callback', @obj.UpdateAxes); 
            
            obj.UIAxes.MultipleAxesPlotPeaks = [];
            
            % Initial peak assignments
            PeakDetection(obj);
            
            % Set axes scale
            UpdateAxesScale(obj);
            
            clear xMax yMin yMax
        end
        
        % Available view options
        function InitializeViewOptions(obj, varargin)
                   
            switch get(get(obj.UITable.PlotOverlayOptions, 'SelectedObject'), 'tag');      
                case 'overlaybutton'
                    obj.UIProperties.PlotOverlay = 'on';   
                case 'separatebutton'
                    obj.UIProperties.PlotOverlay = 'off';
            end

            switch get(get(obj.UITable.PlotTICOptions, 'SelectedObject'), 'tag');
                case 'ticbutton'
                    obj.UIProperties.PlotTIC = 'on';
                case 'ionsbutton'
                    obj.UIProperties.PlotTIC = 'off';
            end
            
            switch get(get(obj.UITable.PlotAllOptions, 'SelectedObject'), 'tag');
                case 'allbutton'
                    obj.UIProperties.PlotAll = 'on';
                case 'selectedbutton'
                    obj.UIProperties.PlotAll = 'off';
            end
            
            switch get(get(obj.UITable.PlotScaleOptions, 'SelectedObject'),'tag');
                case 'normalizescalebutton'
                    obj.UIProperties.PlotScale = 'on';
                case 'samescalebutton'
                    obj.UIProperties.PlotScale = 'off';
            end
            
            UpdateAxes(obj);
        end
        
        % Resize figure options
        function UpdateFigureSize(obj, varargin)
            
            % Set all positions normalized to figure size
            obj.UIPositions.FigurePosition = get(obj.UIFigure, 'Position');
            
            ConstructUIPositions(obj);
        end
        
        % Update axes and plot data
        function UpdateAxes(obj, varargin)
  
            % Plot all or selected samples/ions
            switch obj.UIProperties.PlotAll
                
                % Plot all samples/ions
                case 'on'
                    
                    obj.UIProperties.CurrentPlots = obj.UIProperties.TotalSamples;
                    
                    % Set selected samples to all
                    obj.UIProperties.SelectedSamples = 1:obj.UIProperties.CurrentPlots;
                    obj.UIProperties.SelectedIons = 1:obj.UIProperties.TotalIons;
                    SelectedIons = length(obj.UIProperties.SelectedIons);
                         
                    % If TIC button is enabled
                    if strcmp(obj.UIProperties.PlotTIC, 'on') == 1
                        
                        % Reset ActivePlotData
                        obj.ActivePlotData = [];

                        % For all samples
                        for i = 1:obj.UIProperties.CurrentPlots
                            
                            % Set xy values equal to TIC values
                            obj.ActivePlotData(i).Name = obj.PlotData(i).Name;
                            obj.ActivePlotData(i).ID = obj.PlotData(i).ID;
                            obj.ActivePlotData(i).XValues = obj.PlotData(i).TimeValues;
                            obj.ActivePlotData(i).YValues = obj.PlotData(i).TotalIntensityValues;
                            
                            try
                                if strcmp(obj.UIProperties.ViewBaseline, 'on')
                                    obj.ActivePlotData(i).Baseline = obj.UserBaseline{i,3};
                                end
                            catch
                                continue
                            end
                            
                            % Set line color
                            obj.ActivePlotData(i).LineColor = 'black';
                        end
                        
                    % If EIC button is enabled    
                    else

                        % Reset ActivePlotData
                        obj.ActivePlotData = [];

                        % For all samples
                        for i = 1:obj.UIProperties.CurrentPlots
                            
                            % Set y values equal to EIC values
                            obj.ActivePlotData(i).Name = obj.PlotData(i).Name;
                            obj.ActivePlotData(i).XValues = obj.PlotData(i).TimeValues;
                            obj.ActivePlotData(i).ID = obj.PlotData(i).ID;
                            
                            % Set y values to selected ion values
                            for j = 1:SelectedIons
                                
                                obj.ActivePlotData(i).YValues(:,j) = ...
                                    obj.PlotData(obj.UIProperties.SelectedSamples(i)).IntensityValues(:,...
                                        obj.UITable.AvailableIonsList{1, obj.UIProperties.SelectedIons(j)});

                                % Set line color properties
                                obj.ActivePlotData(i).LineColor{j} = ...
                                    obj.UITable.AvailableIonsList{3, obj.UIProperties.SelectedIons(j)};
                                
                                % Set ions
                                obj.ActivePlotData(i).Ions{j} = ...
                                    obj.UITable.AvailableIonsList{4, obj.UIProperties.SelectedIons(j)};
                                
                                if strcmp(obj.UIProperties.ViewPeaks, 'on');
                                    obj.ActivePlotData(i).Peaks(j,1) = ....
                                        obj.UserPeaks{i,j}(1,1);
                                    
                                    obj.ActivePlotData(i).Peaks(j,2) = ....
                                        obj.UserPeaks{i,j}(1,2);
                                end
                                
                                if strcmp(obj.UIProperties.ViewBaseline, 'on');
                                    try
                                        % Set baseline
                                        obj.ActivePlotData(i).Baseline(:,j) = obj.UserBaseline{i,5}{j};
                                    catch
                                        continue
                                    end
                                end
                            end
                        end
                    end

                % Plot selected samples/ions
                case 'off'
                    
                    % Index values of selected samples/ions
                    obj.UIProperties.SelectedSamples = get(obj.UITable.AvailableSamplesListBox, 'Value');
                    obj.UIProperties.SelectedIons = get(obj.UITable.AvailableIonsListBox, 'Value');
                    
                    % Number of samples/ions currently selected
                    SelectedSamples = length(obj.UIProperties.SelectedSamples);
                    
                    SelectedIons = length(obj.UIProperties.SelectedIons);
                    obj.UIProperties.CurrentPlots = SelectedSamples;
                                        
                    % If TIC button is enabled
                    if strcmp(obj.UIProperties.PlotTIC, 'on') == 1

                        % Reset y values
                        obj.ActivePlotData = [];
                         
                        % For all samples selected
                        for i = 1:SelectedSamples
                            
                            % Set xy values to TICs of corresponding samples
                            obj.ActivePlotData(i).Name = ...
                                obj.PlotData(obj.UIProperties.SelectedSamples(i)).Name;
                            
                            obj.ActivePlotData(i).ID = ...
                                obj.PlotData(obj.UIProperties.SelectedSamples(i)).ID;
                            
                            obj.ActivePlotData(i).XValues = ...
                                obj.PlotData(obj.UIProperties.SelectedSamples(i)).TimeValues;
                            
                            obj.ActivePlotData(i).YValues = ...
                                obj.PlotData(obj.UIProperties.SelectedSamples(i)).TotalIntensityValues;
                            
                            try
                                if strcmp(obj.UIProperties.ViewBaseline, 'on');
                                    obj.ActivePlotData(i).Baseline = ...
                                        obj.UserBaseline{obj.UIProperties.SelectedSamples(i),3};
                                end
                            catch
                                continue
                            end
                            
                            % Set line color
                            obj.ActivePlotData(i).LineColor = 'black';
                        end
                        
                    % If EIC button is enabled
                    else
                        
                        % Reset y values
                        obj.ActivePlotData = [];
                        
                        % For all samples selected
                        for i = 1:SelectedSamples
                            
                            % Set xy values to EICs of corresponding samples
                            obj.ActivePlotData(i).Name = ...
                                obj.PlotData(obj.UIProperties.SelectedSamples(i)).Name;
                            
                            obj.ActivePlotData(i).ID = ...
                                obj.PlotData(obj.UIProperties.SelectedSamples(i)).ID;
                            
                            obj.ActivePlotData(i).XValues = ...
                                obj.PlotData(obj.UIProperties.SelectedSamples(i)).TimeValues;

                            % Set y values to selected ion values
                            for j = 1:SelectedIons
                                
                                obj.ActivePlotData(i).YValues(:,j) = ...
                                    obj.PlotData(obj.UIProperties.SelectedSamples(i)).IntensityValues(:,...
                                        obj.UITable.AvailableIonsList{1, obj.UIProperties.SelectedIons(j)});
                                
                                % Set line color properties
                                obj.ActivePlotData(i).LineColor{j} = ...
                                    obj.UITable.AvailableIonsList{3, obj.UIProperties.SelectedIons(j)};
                                
                                % Set selected ions
                                obj.ActivePlotData(i).Ions{j} = ...
                                    obj.UITable.AvailableIonsList{4, obj.UIProperties.SelectedIons(j)};
                                                                
                                if strcmp(obj.UIProperties.ViewPeaks, 'on');
                                    
                                    obj.ActivePlotData(i).Peaks(j,1) = ....
                                        obj.UserPeaks{obj.UIProperties.SelectedSamples(i),obj.UIProperties.SelectedIons(j)}(1,1);
                                    
                                    obj.ActivePlotData(i).Peaks(j,2) = ....
                                        obj.UserPeaks{obj.UIProperties.SelectedSamples(i),obj.UIProperties.SelectedIons(j)}(1,2);
                                end
                                
                                if strcmp(obj.UIProperties.ViewBaseline, 'on');
                                    try
                                        % Set baseline
                                        obj.ActivePlotData(i).Baseline(:,j) = ...
                                            obj.UserBaseline{obj.UIProperties.SelectedSamples(i),5}{obj.UIProperties.SelectedIons(j)};
                                    catch
                                        continue
                                    end
                                end
                            end
                        end
                    end
            end
            
            % Determine which plotting function to send data to
            switch obj.UIProperties.PlotOverlay
                
                % Plot overlay
                case 'on'
                    SingleAxesPlot(obj);
                    
                % Plot on separate axes
                case 'off'
                    MultipleAxesPlot(obj);
            end
        end
        
        % Update table data and list boxes
        function UpdateTable(obj, varargin)
           
            % Check for existing table data
            obj.UITable.TableData = get(obj.UITable.Table, 'Data');
            
            for i = 1:length(obj.PlotData);
                
                % Update data name values
                obj.PlotData(1,i,1).Name = obj.UITable.TableData{i,2};
                
                % Update sample list box values
                SamplesList{i} = obj.PlotData(i).Name;
            end
            
            % Set available samples list
            obj.UITable.AvailableSamplesList = SamplesList;
            
            % Update user interface list box values
            set(obj.UITable.AvailableSamplesListBox,...
                'String', obj.UITable.AvailableSamplesList);
        end
        
        % Update process mode
        function UpdateProcessMode(obj, varargin)
           
            % Get state of toggle button
            switch get(obj.UIAxes.ProcessModeToggle, 'Value')
                
                % Off - View Mode
                case 0
                    
                    % Set mode to on
                    obj.UIProperties.ProcessMode = 'off';
                    
                    % Change visibility options of radio buttons
                    set(obj.UITable.PlotOverlayOptions, 'Visible', 'on');
                    set(obj.UITable.PlotTICOptions, 'Visible', 'on');
                    set(obj.UITable.PlotAllOptions, 'Visible', 'on');
                    set(obj.UITable.PlotScaleOptions, 'Visible', 'on');
                    
                    % Change title of view options panel
                    set(obj.UITable.ViewOptionsPanel,'Title', 'View Options');

                    % Turn process status text off
                    ProcessStatusTextOff(obj);
                    
                % On - Process Mode
                case 1
                    
                    % Set mode to on
                    obj.UIProperties.ProcessMode = 'on';
                    
                    % Change visibility options of radio buttons
                    set(obj.UITable.PlotOverlayOptions, 'Visible', 'off');
                    set(obj.UITable.PlotTICOptions, 'Visible', 'off');
                    set(obj.UITable.PlotAllOptions, 'Visible', 'off');
                    set(obj.UITable.PlotScaleOptions, 'Visible', 'off');
                    
                    % Change title of view options panel
                    set(obj.UITable.ViewOptionsPanel,'Title', 'Status');
                    
                    % Turn process status text on
                    ProcessStatusTextOn(obj);
            end
            
            obj.UITable.ProcessStatusPeakDetection;
            
            function ProcessStatusTextOff(obj, varargin)
                
                % Sections
                set(obj.UITable.ProcessStatusCropData,'Visible', 'off');
                set(obj.UITable.ProcessStatusBaselineCorrection,'Visible', 'off');
                set(obj.UITable.ProcessStatusPeakDetection,'Visible', 'off');
                set(obj.UITable.ProcessStatusPeakIntegration,'Visible', 'off');
                
                % Counters
                set(obj.UITable.ProcessStatusCropDataSeparatorText,'Visible', 'off');
                set(obj.UITable.ProcessStatusCropDataIonsRemaining,'Visible', 'off');
                set(obj.UITable.ProcessStatusCropDataSamplesRemaining,'Visible', 'off');
                
                set(obj.UITable.ProcessStatusBaselineCorrectionSeparatorText,'Visible', 'off');
                set(obj.UITable.ProcessStatusBaselineCorrectionIonsRemaining,'Visible', 'off');
                set(obj.UITable.ProcessStatusBaselineCorrectionSamplesRemaining,'Visible', 'off');
                
                set(obj.UITable.ProcessStatusPeakDetectionSeparatorText,'Visible', 'off');
                set(obj.UITable.ProcessStatusPeakDetectionIonsRemaining,'Visible', 'off');
                set(obj.UITable.ProcessStatusPeakDetectionSamplesRemaining,'Visible', 'off');
                
                set(obj.UITable.ProcessStatusPeakIntegrationSeparatorText,'Visible', 'off');
                set(obj.UITable.ProcessStatusPeakIntegrationIonsRemaining,'Visible', 'off');
                set(obj.UITable.ProcessStatusPeakIntegrationSamplesRemaining,'Visible', 'off');
            end
            
            function ProcessStatusTextOn(obj, varargin)
                
                % Sections
                set(obj.UITable.ProcessStatusCropData,'Visible', 'on');
                set(obj.UITable.ProcessStatusBaselineCorrection, 'Visible', 'on');
                set(obj.UITable.ProcessStatusPeakDetection,'Visible', 'on');
                set(obj.UITable.ProcessStatusPeakIntegration,'Visible', 'on');
                
                % Counters
                set(obj.UITable.ProcessStatusCropDataSeparatorText,'Visible', 'on');
                set(obj.UITable.ProcessStatusCropDataIonsRemaining,'Visible', 'on');
                set(obj.UITable.ProcessStatusCropDataSamplesRemaining,'Visible', 'on');
                
                set(obj.UITable.ProcessStatusBaselineCorrectionSeparatorText,'Visible', 'on');
                set(obj.UITable.ProcessStatusBaselineCorrectionIonsRemaining,'Visible', 'on');
                set(obj.UITable.ProcessStatusBaselineCorrectionSamplesRemaining,'Visible', 'on');
                
                set(obj.UITable.ProcessStatusPeakDetectionSeparatorText,'Visible', 'on');
                set(obj.UITable.ProcessStatusPeakDetectionIonsRemaining,'Visible', 'on');
                set(obj.UITable.ProcessStatusPeakDetectionSamplesRemaining,'Visible', 'on');
                
                set(obj.UITable.ProcessStatusPeakIntegrationSeparatorText,'Visible', 'on');
                set(obj.UITable.ProcessStatusPeakIntegrationIonsRemaining,'Visible', 'on');
                set(obj.UITable.ProcessStatusPeakIntegrationSamplesRemaining,'Visible', 'on');
            end
        end
        
        % Update crop filter
        function UpdateCropFilter(obj, varargin)
           
            % Get current crop setting
            MinCrop = obj.UIProperties.CropMin;
            MaxCrop = obj.UIProperties.CropMax;
            
            % Assign crop values to on-screen data
            for i = 1:length(obj.ActivePlotData)
            
                % Ensure min value is valid for sample
                if MinCrop >= obj.ActivePlotData(i).XValues(1,1)
                
                    % Set min crop value
                    obj.UserCrop{obj.ActivePlotData(i).ID,1} = MinCrop;
                
                    % Set table data values for crop
                    obj.UITable.TableData{obj.ActivePlotData(i).ID, 6} = num2str(MinCrop, '%6.2f');
                else
                    
                    % Set to minimum
                    obj.UserCrop{obj.ActivePlotData(i).ID,1} = obj.ActivePlotData(i).XValues(1,1);
                    obj.UITable.TableData{obj.ActivePlotData(i).ID, 6} = num2str(obj.ActivePlotData(i).XValues(1,1), '%6.2f');
                end
                
                if MaxCrop <= obj.ActivePlotData(i).XValues(end,1)
                    
                    % Set max crop value
                    obj.UserCrop{obj.ActivePlotData(i).ID,2} = MaxCrop;
                
                    % Set table data values for crop
                    obj.UITable.TableData{obj.ActivePlotData(i).ID, 7} = num2str(MaxCrop, '%6.2f');
                    
                else
                    % Set to maximum
                    obj.UserCrop{obj.ActivePlotData(i).ID,2} = obj.ActivePlotData(i).XValues(end,1);
                    obj.UITable.TableData{obj.ActivePlotData(i).ID, 7} = num2str(obj.ActivePlotData(i).XValues(end,1), '%6.2f');
                end
            end
            
            set(obj.UITable.Table, 'Data', obj.UITable.TableData);
        end
        
        % Update all crop filter
        function UpdateAllCropFilter(obj, varargin)
            
            % Get current crop setting
            MinCrop = obj.UIProperties.CropMin;
            MaxCrop = obj.UIProperties.CropMax;
            
            % Assign crop values to on-screen data
            for i = 1:length(obj.PlotData)
            
                % Ensure min value is valid for sample
                if MinCrop >= obj.PlotData(i).TimeValues(1,1)
                
                    % Set to input value
                    obj.UserCrop{obj.PlotData(i).ID,1} = MinCrop;
                    
                    % Set table data values for crop
                    obj.UITable.TableData{obj.PlotData(i).ID, 6} = num2str(MinCrop, '%6.2f');
                else

                    %Set to minimum
                    obj.UserCrop{obj.PlotData(i).ID,1} = obj.PlotData(i).TimeValues(1,1);
                    obj.UITable.TableData{obj.PlotData(i).ID, 6} = num2str(obj.PlotData(i).TimeValues(1,1), '%6.2f');
                end

                % Ensure max value is valid for samples
                if MaxCrop <= obj.PlotData(i).TimeValues(end,1)

                    % Set to input value
                    obj.UserCrop{obj.PlotData(i).ID,2} = MaxCrop;

                    % Set table data values for crop
                    obj.UITable.TableData{obj.PlotData(i).ID, 7} = num2str(MaxCrop, '%6.2f');
                else
                    
                    %Set to maximum
                    obj.UserCrop{obj.PlotData(i).ID,2} = obj.PlotData(i).TimeValues(end,1);
                    obj.UITable.TableData{obj.PlotData(i).ID, 7} = num2str(obj.PlotData(i).TimeValues(end,1), '%6.2f');
                end
            end

            set(obj.UITable.Table, 'Data', obj.UITable.TableData);
        end

        % Update baseline components
        function UpdateBaselineSlider(obj, varargin)
            
            % Execute if data is present
            if isempty(obj.PlotData) == 0
                
                % Get slider values
                Slider1Value = get(obj.UIAxes.BaselineSmoothness, 'Value');
                Slider2Value = get(obj.UIAxes.BaselineAsymmetry, 'Value');
                
                % Set values to useful range
                obj.UIProperties.Smoothness = 10^Slider1Value;
                obj.UIProperties.Asymmetry = 10^-(Slider2Value/2);
            
                set(obj.UIAxes.BaselineCorrectionSmoothnessText,...
                    'String', num2str(Slider1Value));
                
                set(obj.UIAxes.BaselineCorrectionAsymmetryText,...
                    'String', num2str(Slider2Value));
            end
        end
        
        % Apply baseline calculation
        function UpdateBaselineApply(obj, varargin)
            
            set(obj.UIAxes.BaselineApplyButton, 'Value', get(obj.UIAxes.BaselineApplyButton, 'Min'));
            
            % Assign values for on-screen data
            for i = 1:length(obj.ActivePlotData)
                
                % Set parameters used to calculate baseline
                obj.UserBaseline{obj.ActivePlotData(i).ID,1} = obj.UIProperties.Smoothness;
                obj.UserBaseline{obj.ActivePlotData(i).ID,2} = obj.UIProperties.Asymmetry;
            
                % IF TIC button is selected
                if strcmp(obj.UIProperties.PlotTIC, 'on') == 1
                    
                    % Minimum X value to use
                    XMin = find(obj.ActivePlotData(i).XValues >= ...
                        obj.UserCrop{obj.ActivePlotData(i).ID,1}, 1);
                    
                    % Maximum X value to use
                    XMax = find(obj.ActivePlotData(i).XValues >= ...
                        obj.UserCrop{obj.ActivePlotData(i).ID,2}, 1);
                    
                    % Calculate baseline
                    BaselineOutput = ...
                        obj.CalculateBaseline.BaselineCorrection(...
                        obj.ActivePlotData(i).YValues(XMin:XMax,1),...
                        obj.UserBaseline{obj.ActivePlotData(i).ID,1},...
                        obj.UserBaseline{obj.ActivePlotData(i).ID,2});
                    
                    % TIC baseline in column 3
                    obj.UserBaseline{obj.ActivePlotData(i).ID,3} = ...
                        BaselineOutput.BaselineData.Baseline;
                    
                    % TIC corrected in column 4
                    obj.UserBaseline{obj.ActivePlotData(i).ID,4} = ....
                        BaselineOutput.BaselineData.BaselineCorrected;
                    
                    clear BaselineOutput XMin XMax;
                end
                
                if strcmp(obj.UIProperties.PlotTIC, 'on') == 0

                    % Determine which ions were selected
                    obj.UIProperties.SelectedIons = get(obj.UITable.AvailableIonsListBox, 'Value');

                    % Minimum X value to use
                    XMin = find(obj.ActivePlotData(i).XValues >= ...
                        obj.UserCrop{obj.ActivePlotData(i).ID,1}, 1);

                    % Maximum X value to use
                    XMax = find(obj.ActivePlotData(i).XValues >= ...
                        obj.UserCrop{obj.ActivePlotData(i).ID,2}, 1);

                    % Determine if current data is normalized
                    if strcmp(obj.UIProperties.PlotScale, 'off')
                    
                        % Calculate baseline if data is not normalized
                        BaselineOutput = ...
                            obj.CalculateBaseline.BaselineCorrection(...
                                obj.ActivePlotData(i).YValues(XMin:XMax,:),...
                                obj.UserBaseline{obj.ActivePlotData(i).ID,1},...
                                obj.UserBaseline{obj.ActivePlotData(i).ID,2});
                    
                    % If data is currently normalized
                    elseif strcmp(obj.UIProperties.PlotScale, 'on')
                        
                        % Pre-allocate memory for variable
                        YData = zeros(...
                            length(obj.PlotData(obj.ActivePlotData(i).ID).IntensityValues(:,1)), ...
                            length(obj.ActivePlotData(i).Ions));
                        
                        % For each ion selected
                        for j = 1:length(obj.ActivePlotData(i).Ions)
                            
                            % Reassign y values to non-normalized values
                            YData(:,j) = obj.PlotData(obj.ActivePlotData(i).ID).IntensityValues(:,...
                                obj.UITable.AvailableIonsList{1, obj.ActivePlotData(i).Ions{j}});
                        end
                        
                        % Calculate baseline on non-normalized data
                        BaselineOutput = ...
                            obj.CalculateBaseline.BaselineCorrection(...
                            obj.YData(XMin:Max, :),...
                            obj.UserBaseline{obj.ActivePlotData(i).ID, 1},...
                            obj.UserBaseline{obj.ActivePlotData(i).ID, 2});
                            
                        clear YData    
                    end
                    
                    % Set selected ions
                    if strcmp(obj.UIProperties.PlotAll, 'on') == 0

                        % For all selected ions
                        for j = 1:length(obj.ActivePlotData(i).YValues(1,:))
 
                            % Reassign ions baseline to column 5 of obj.UserBaseline
                            obj.UserBaseline{obj.ActivePlotData(i).ID, 5}{obj.UIProperties.SelectedIons(j)} = ...
                                BaselineOutput.BaselineData.Baseline(:,j);

                            % Reassign baseline corrected ion chromatograms to column 6 of obj.UserBaseline 
                            obj.UserBaseline{obj.ActivePlotData(i).ID, 6}{obj.UIProperties.SelectedIons(j)} = ...
                                BaselineOutput.BaselineData.BaselineCorrected(:,j);
                        end
                    else
                        
                        % Set all ions
                        for j = 1:length(obj.UIProperties.SelectedIons)
 
                            % Reassign ions baseline to column 5 of obj.UserBaseline
                            obj.UserBaseline{obj.ActivePlotData(i).ID, 5}{obj.UIProperties.SelectedIons(j)} = ...
                                BaselineOutput.BaselineData.Baseline(:,j);

                            % Reassign baseline corrected ion chromatograms to column 6 of obj.UserBaseline 
                            obj.UserBaseline{obj.ActivePlotData(i).ID, 6}{obj.UIProperties.SelectedIons(j)} = ...
                                BaselineOutput.BaselineData.BaselineCorrected(:,j);
                        end
                    end
                end
            end
            
            % Go to update axes
            UpdateAxes(obj);
        end

        % Update baseline components
        function UpdateBaselineText(obj, varargin)
           
            % Get input values
            Edit1Value = str2double(get(obj.UIAxes.BaselineCorrectionSmoothnessText, 'String'));
            Edit2Value = str2double(get(obj.UIAxes.BaselineCorrectionAsymmetryText, 'String'));
                 
            if Edit1Value <= 10 && Edit1Value >= 1
            
                % Set values to useful range
                Smoothness = log10(Edit1Value);
                
                % Assign values for on-screen data
                for i = 1:length(obj.ActivePlotData)
                    
                    obj.UserBaseline{obj.ActivePlotData(i).ID,1} = Smoothness;
                end
                
                % Set slider
                set(obj.UIAxes.BaselineSmoothness, 'Value', Edit1Value);
                obj.UIProperties.Smoothness = Edit1Value;
            else
                set(obj.UIAxes.BaselineSmoothness, 'Value', obj.UIProperties.Smoothness);
                set(obj.UIAxes.BaselineCorrectionSmoothnessText, 'String', num2str(obj.UIProperties.Smoothness));
            end
            
            if Edit2Value <= 10 && Edit2Value >=1
                
                % Set values to useful range
                Asymmetry = abs(log10(Edit2Value)*2);
                
                % Assign values for on-screen data
                for i = 1:length(obj.ActivePlotData)
                    
                    obj.UserBaseline{obj.ActivePlotData(i).ID,2} = Asymmetry;
                end
                
                % Set slider
                set(obj.UIAxes.BaselineAsymmetry, 'Value', Edit2Value);
                obj.UIProperties.Edit2VAsymmetryalue = Edit2Value;
            else
                set(obj.UIAxes.BaselineAsymmetry, 'Value', obj.UIProperties.Asymmetry);
                set(obj.UIAxes.BaselineCorrectionAsymmetryText, 'String', num2str(obj.UIProperties.Asymmetry));
            end
        end
        
        % Display calculated baseline
        function ViewBaselineCorrection(obj, varargin)
           
            % Determine if button state is on or off
            ButtonState = get(obj.UIAxes.ViewBaseline, 'Value');
            
            % If buttone is on
            if ButtonState == get(obj.UIAxes.ViewBaseline, 'Max')
                
                % Set global variable to on
                obj.UIProperties.ViewBaseline = 'on';
                
            elseif ButtonState == get(obj.UIAxes.ViewBaseline, 'Min')
                
                % Set global variable to off
                obj.UIProperties.ViewBaseline = 'off';
            end 
            
            UpdateAxes(obj);
        end
        
        % Update peak detection text box
        function UpdatePeakDetectionText(obj, varargin)
            
            CurrentSampleID = ...
                str2double(get(obj.UIAxes.PeakDetectionCurrentSample, 'String'));
            
            CurrentIonValue = ...
                str2double(get(obj.UIAxes.PeakDetectionCurrentIon, 'String'));
            
            IonList = cell2mat(obj.UITable.AvailableIonsList(1,:));
            
            CurrentIonID = find(IonList == CurrentIonValue, 1);
            
            if isempty(CurrentIonID) == 1 
                CurrentIonID = 1;
            end
            
            % 
            if CurrentSampleID >= 1 && CurrentSampleID <= length(obj.UITable.AvailableSamplesList)
                
                set(obj.UIAxes.PeakDetectionCurrentSample, 'String', num2str(CurrentSampleID));
                obj.UIProperties.CurrentSampleID = CurrentSampleID;
                
                set(obj.UITable.AvailableSamplesListBox, 'Value', CurrentSampleID);
            end
            
            % 
            if CurrentIonID >= 1 && CurrentIonID <= length(obj.UITable.AvailableIonsList)
                
                set(obj.UIAxes.PeakDetectionCurrentIon, 'String', num2str(CurrentIonValue));
                obj.UIProperties.CurrentIonID = CurrentIonValue;
                
                set(obj.UITable.AvailableIonsListBox, 'Value', CurrentIonID);
            end
            
            UpdateAxes(obj);
            
        end
        
        % Update peak detection text box
        function UpdatePeakDetectionPeakText(obj, varargin)
            
            CurrentSampleID = ...
                str2double(get(obj.UIAxes.PeakDetectionCurrentSample, 'String'));
            
            CurrentIonValue = ...
                str2double(get(obj.UIAxes.PeakDetectionCurrentIon, 'String'));
            
            IonList = cell2mat(obj.UITable.AvailableIonsList(1,:));
            
            CurrentIonID = find(IonList == CurrentIonValue, 1);
            
            if isempty(CurrentIonID) == 1 
                CurrentIonID = 1;
            end
            
            CurrentRetentionTime = ...
                str2double(get(obj.UIAxes.PeakDetectionRetentionTime, 'String'));
            
            % 
            if CurrentSampleID >= 1 && CurrentSampleID <= length(obj.UITable.AvailableSamplesList)
                
                set(obj.UIAxes.PeakDetectionCurrentSample, 'String', num2str(CurrentSampleID));
                obj.UIProperties.CurrentSampleID = CurrentSampleID;
                
                set(obj.UITable.AvailableSamplesListBox, 'Value', CurrentSampleID);
            else
                CurrentSampleID = 1;
            end
            
            % 
            if CurrentIonID >= 1 && CurrentIonID <= length(obj.UITable.AvailableIonsList)
                
                set(obj.UIAxes.PeakDetectionCurrentIon, 'String', num2str(CurrentIonValue));
                obj.UIProperties.CurrentIonID = CurrentIonValue;
                
                set(obj.UITable.AvailableIonsListBox, 'Value', CurrentIonID);
            else
                CurrentIonID = 1;
            end
            
            if CurrentRetentionTime <= obj.UserCrop{CurrentSampleID,2}
                
                MaxWindow = find(obj.ActivePlotData(1).XValues >= CurrentRetentionTime + 0.50, 1);
                MinWindow = find(obj.ActivePlotData(1).XValues >= CurrentRetentionTime - 0.50, 1);
                
                [PeakHeight, RetentionTime] = max(obj.ActivePlotData(1).YValues(MinWindow:MaxWindow,1));
                
                NewRetentionTime = obj.ActivePlotData(1).XValues(RetentionTime+MinWindow);
                
                set(obj.UIAxes.PeakDetectionRetentionTime, 'String', num2str(NewRetentionTime, '%6.2f'));
                
                obj.UIProperties.CurrentRetentionTime = NewRetentionTime;
                        
                obj.UserPeaks{CurrentSampleID,CurrentIonID}(1,1) = ...
                    obj.PlotData(CurrentSampleID).TimeValues(RetentionTime+MinWindow,1);
                
                obj.UserPeaks{CurrentSampleID,CurrentIonID}(1,2) = PeakHeight;
                        
                obj.UITable.TableData{obj.PlotData(CurrentSampleID).ID, 7+CurrentIonID} = ...
                num2str(obj.PlotData(CurrentSampleID).TimeValues(RetentionTime+MinWindow,1), '%6.2f');
                    
                set(obj.UITable.Table, 'Data', obj.UITable.TableData);
            end
            
            UpdateAxes(obj);
            
        end
        
        % Update peak detection apply
        function UpdatePeakDetectionApply(obj, varargin)
            
            for i = 1:length(obj.PlotData)
                for j = 1:length(obj.UITable.AvailableIonsList(1,:))
                    
                    if obj.UIProperties.CurrentIonID == obj.UITable.AvailableIonsList{1,j}
                        
                        Min = find(obj.PlotData(i).TimeValues >= obj.UIProperties.CurrentRetentionTime - 0.5);
                        Max = find(obj.PlotData(i).TimeValues >= obj.UIProperties.CurrentRetentionTime + 0.5);
                        
                        [PeakHeight, RetentionTime] = ...
                            max(obj.PlotData(i).IntensityValues(Min:Max,obj.UITable.AvailableIonsList{1,j}));
                        
                        obj.UserPeaks{i,j}(1,1) = obj.PlotData(i).TimeValues(RetentionTime,1);
                        obj.UserPeaks{i,j}(1,2) = PeakHeight;
                        
                        obj.UITable.TableData{obj.PlotData(i).ID, 7+j} = ...
                            num2str(obj.PlotData(i).TimeValues(RetentionTime,1), '%6.2f');
                    
                        set(obj.UITable.Table, 'Data', obj.UITable.TableData);
                    end
                end
            end
            
            UpdateAxes(obj);
            
        end
        
        % View detected peaks
        function ViewPeakDetection(obj, varargin)
           
            % Respond to change in button status
            ButtonState = get(obj.UIAxes.PeakDetectionViewButton, 'Value');
            
            % If button was turned 'off'
            if ButtonState == get(obj.UIAxes.PeakDetectionViewButton, 'Min');
            
                % Update global variable
                obj.UIProperties.ViewPeaks = 'off';
                
            % If button was turned 'on'    
            else
                
                % Update global variable
                obj.UIProperties.ViewPeaks = 'on';
            end
            
            UpdateAxes(obj);
        end
        
        % Integrate peak area
        function UpdatePeakIntegration(obj, varargin)
            
            % Set local variable
            SelectedSamplesID = get(obj.UITable.AvailableSamplesListBox, 'Value');
            
            % Set local variable
            SelectedIonsID = get(obj.UITable.AvailableIonsListBox, 'Value');
            
            IonsList = cell2mat(obj.UITable.AvailableIonsList(1,:));
            
            Ia = find(IonsList == 1022,1);
            Ib = find(IonsList == 1020,1);
            Ic = find(IonsList == 1018,1);
            
            IIa = find(IonsList == 1036,1);
            IIb = find(IonsList == 1034,1);
            IIc = find(IonsList == 1032,1);
            
            IIIa = find(IonsList == 1050,1);
            IIIb = find(IonsList == 1048,1);
            IIIc = find(IonsList == 1046,1);
            
            % Correct non-zero baseline corrected spectra
            for i = 1:length(SelectedSamplesID)
                for j = 1:length(SelectedIonsID)
                    
                    % Find minimum value in corrected spectra
                    try
                        CorrectionFactor = abs(min(...
                            obj.UserBaseline{SelectedSamplesID(i), 6}{SelectedIonsID(j)}));
                        
                        obj.UserPeakAreaInput{SelectedSamplesID(i), SelectedIonsID(j)} = ...
                            obj.UserBaseline{SelectedSamplesID(i), 6}{SelectedIonsID(j)} + CorrectionFactor;
                    catch
                        continue
                    end
                end
            end
            
            TableStart = length(obj.UITable.AvailableIonsList) + 7;
            
            for i = 1:length(SelectedSamplesID)
                for j = 1:length(SelectedIonsID)
                    
                    MinTime = obj.UserPeaks{SelectedSamplesID(i), SelectedIonsID(j)}(1,1) - 2;
                    MaxTime = obj.UserPeaks{SelectedSamplesID(i), SelectedIonsID(j)}(1,1) + 2;
                    
                    MinIndex = find(obj.PlotData(i).TimeValues >= MinTime, 1);
                    MaxIndex = find(obj.PlotData(i).TimeValues >= MaxTime, 1);
            
                    PeakData = obj.CalculateArea.CalculateArea(...
                        obj.PlotData(i).TimeValues(MinIndex:MaxIndex, 1),...
                        obj.UserPeakAreaInput{SelectedSamplesID(i), SelectedIonsID(j)}(MinIndex:MaxIndex, 1),...
                        obj.UserPeaks{SelectedSamplesID(i), SelectedIonsID(j)}(1,1),...
                        'EMG');
                    
                    obj.UserPeakAreaOutput{SelectedSamplesID(i), SelectedIonsID(j)} = ...
                        PeakData.peakArea;

                    % Set table data
                    obj.UITable.TableData{SelectedSamplesID(i), TableStart+SelectedIonsID(j)} = ...
                        num2str(obj.UserPeakAreaOutput{SelectedSamplesID(i), SelectedIonsID(j)}, '%6.2f');
                end
                
                
                try
                    % 1 MBT; 2 CBT; 3 pH; 4 MAAT
                    StartColumn = 7 + (2*length(obj.UITable.AvailableIonsList(1,:)));
                    
                    SumI = (obj.UserPeakAreaOutput{SelectedSamplesID(i), Ia} + ...
                           obj.UserPeakAreaOutput{SelectedSamplesID(i), Ib} + ...
                           obj.UserPeakAreaOutput{SelectedSamplesID(i), Ic});
                       
                    SumII = (obj.UserPeakAreaOutput{SelectedSamplesID(i), IIa} + ...
                           obj.UserPeakAreaOutput{SelectedSamplesID(i), IIb} + ...
                           obj.UserPeakAreaOutput{SelectedSamplesID(i), IIc});
                       
                    SumIII = (obj.UserPeakAreaOutput{SelectedSamplesID(i), IIIa} + ...
                           obj.UserPeakAreaOutput{SelectedSamplesID(i), IIIb} + ...
                           obj.UserPeakAreaOutput{SelectedSamplesID(i), IIIc});
                       
                    MBT = SumI / (SumI + SumII + SumIII);
                       
                    obj.UITable.TableData{SelectedSamplesID(i), StartColumn + 1} = ...
                        num2str(MBT, '%6.2f');
                    
                    SumB = obj.UserPeakAreaOutput{SelectedSamplesID(i), Ib} + ...
                            obj.UserPeakAreaOutput{SelectedSamplesID(i), IIb};
                        
                    SumA = obj.UserPeakAreaOutput{SelectedSamplesID(i), Ia} + ...
                            obj.UserPeakAreaOutput{SelectedSamplesID(i), IIa};
                        
                    CBT = -log10((SumB/SumA));
                    
                    obj.UITable.TableData{SelectedSamplesID(i), StartColumn + 2} = ...
                        num2str(CBT, '%6.2f');
                        
                    pH = (3.22 - CBT) / 0.38;
                    MAAT = (MBT - 0.122 - 0.187 * CBT) / 0.02;
                    
                    obj.UITable.TableData{SelectedSamplesID(i), StartColumn + 3} = ...
                        num2str(pH, '%6.2f');
                    
                    obj.UITable.TableData{SelectedSamplesID(i), StartColumn + 4} = ...
                        num2str(MAAT, '%6.2f');
                catch
                    continue
                end
                
                set(obj.UITable.Table, 'Data', obj.UITable.TableData);
                    
                drawnow;
            end
            
            
        end
        
        % Construct single axes for overlay all
        function SingleAxes(obj, varargin)
            
            obj.UIAxes.SingleAxes{1} = axes(...
                'Parent', obj.UIAxes.AxesSubPanel,...
                'Units', 'normalized',...
                'Position', [0.0,...
                             1/obj.UIProperties.TotalSamples*0.95,...
                             1.0,...
                             1-1/obj.UIProperties.TotalSamples*0.95],...
                'LooseInset', [0,0,0,0],...
                'NextPlot', 'add',...
                'FontName', obj.UIProperties.FigureFont,...
                'FontSize', obj.UIProperties.FigureFontSizeHeader * 0.75,...
                'TickDir', 'out',...
                'TickLength', [0.005, 0.001],...
                'XColor', 'black',...
                'YColor', 'white',...
                'YTick', [],...
                'LineWidth', 1.15,...
                'Visible', 'off');

            xlabel(...
                obj.UIAxes.SingleAxes{1},...
                'Time (min)',...
                'FontName', obj.UIProperties.FigureFont,...
                'FontSize', obj.UIProperties.FigureFontSizeHeader * 0.75,...
                'FontUnits', obj.UIProperties.FigureFontUnits,...
                'FontWeight', 'normal');
        end
        
        % Construct separate axes for separate all
        function MultipleAxes(obj, varargin)

            % Create multiple axes 
            for i = 1:obj.UIProperties.CurrentPlots
                
                PlotPosition = [0.0,...
                                1.0 - (i) * (1/obj.UIProperties.CurrentPlots*0.93),...
                                1.0,...
                                1/obj.UIProperties.CurrentPlots*0.93];
                            
                            obj.UIAxes.MultipleAxes{i} = axes(...
                                'Parent', obj.UIAxes.AxesSubPanel,...
                                'Units', 'normalized',...
                                'Position', PlotPosition,...
                                'LooseInset', [0,0,0,0],...
                                'NextPlot', 'add',...
                                'FontName', obj.UIProperties.FigureFont,...
                                'FontSize', obj.UIProperties.FigureFontSizeHeader * 0.75,...
                                'TickDir', 'out',...
                                'TickLength', [0.005, 0.001],...
                                'XColor', 'black',...
                                'YColor', 'white',...
                                'YTick', [],...
                                'Visible', 'off');
            end
            
            % Set color of all lines to black
            set(obj.UIAxes.MultipleAxes{length(obj.UIAxes.MultipleAxes)},...
                'XColor', 'black');
            
            % Set x labels on time axis
            xlabel(...
                obj.UIAxes.MultipleAxes{obj.UIProperties.CurrentPlots},...
                'Time (min)',...
                'FontName', obj.UIProperties.FigureFont,...
                'FontSize', obj.UIProperties.FigureFontSizeHeader * 0.75,...
                'FontUnits', obj.UIProperties.FigureFontUnits,...
                'FontWeight', 'normal');
        end
        
        % Plot data on a single axes
        function SingleAxesPlot(obj, varargin)
            
            % Determine how many samples to plot
            obj.UIProperties.CurrentPlots = length(obj.ActivePlotData);
            
            % Destroy existing axes
            DestroyAxes(obj);
            
            % Create new single axes
            SingleAxes(obj);
            
            % Turn on visibility of single overlay axes
            set(obj.UIAxes.SingleAxes{1}, 'Visible', 'on');
            
            % Plot everything on a single axes
            for i = 1:obj.UIProperties.CurrentPlots
                
                % Plot data and store the handle of each sample plot
                obj.UIAxes.SingleAxesPlot{i} = plot(...
                    obj.ActivePlotData(i).XValues, obj.ActivePlotData(i).YValues,...
                    'Parent', obj.UIAxes.SingleAxes{1},...
                    'LineSmoothing', 'on',...
                    'Linewidth', obj.UIProperties.LineWidth,...
                    'YLimInclude', 'off');
                                
                % If EIC button is selected
                if strcmp(obj.UIProperties.PlotTIC, 'on') == 0
                    
                    % Set unique handle for each plot
                    for j = 1:length(obj.ActivePlotData(i).YValues(1,:))
                        
                        set(obj.UIAxes.SingleAxesPlot{i}(j),...
                            'Color', obj.ActivePlotData(i).LineColor{j});
                    end
                    % If TIC button is selected
                else
                    set(obj.UIAxes.SingleAxesPlot{i},...
                        'Color', 'black');
                end
                
                % Plot baseline if it exists and button is on
                if strcmp(obj.UIProperties.ViewBaseline, 'on');
                    try
                        obj.UIAxes.SingleAxesPlotBaseline{i} = plot(...
                            obj.ActivePlotData(i).XValues, obj.ActivePlotData(i).Baseline,...
                            'Parent', obj.UIAxes.SingleAxes{1},...
                            'LineSmoothing', 'on',...
                            'Linewidth', obj.UIProperties.LineWidth,...
                            'YLimInclude', 'off',...
                            'Color', obj.UIProperties.BaselineColor);
                    catch
                        continue
                    end
                end
                
                if strcmp(obj.UIProperties.PlotTIC, 'on') == 0
                    if strcmp(obj.UIProperties.ViewPeaks, 'on')
                        obj.UIAxes.SingleAxesPlotPeaks{i} = plot(...
                            obj.ActivePlotData(i).Peaks(:,1), obj.ActivePlotData(i).Peaks(:,2),...
                            'Parent', obj.UIAxes.SingleAxes{1},...
                            'LineStyle', 'none',...
                            'MarkerFaceColor', 'red',...
                            'MarkerEdgeColor', 'black',...
                            'LineWidth', 2,...
                            'MarkerSize', 7,...
                            'Marker', 'o');
                    else
                        obj.UIAxes.SingleAxesPlotPeaks{i} = [];
                    end
                end
            end

            % Set x limits to current crop filter values
            set(obj.UIAxes.SingleAxes{1},...
                'XLim', [obj.UIProperties.CropMin, obj.UIProperties.CropMax]);
            
            UpdateAxesScale(obj);
        end
        
        % Plot data on a single axes
        function MultipleAxesPlot(obj, varargin)
            
            % Determine how many samples to plot
            obj.UIProperties.CurrentPlots = length(obj.ActivePlotData);
            
            % Destroy existing axes
            DestroyAxes(obj);

            % Create new single axes
            MultipleAxes(obj);

            % Plot everything
            for i = 1:obj.UIProperties.CurrentPlots
 
                % Plot data and store the handle of each sample plot
                obj.UIAxes.MultipleAxesPlot{i} = plot(...
                    obj.ActivePlotData(i).XValues, obj.ActivePlotData(i).YValues,...
                    'Parent', obj.UIAxes.MultipleAxes{i},...
                    'LineSmoothing', 'on',...
                    'Linewidth', obj.UIProperties.LineWidth,...
                    'YLimInclude', 'off');
                                
                % Set x limits of plot
                set(obj.UIAxes.MultipleAxes{i},...
                    'XLim', [obj.UIProperties.CropMin, obj.UIProperties.CropMax])
      
                % If EIC button is selected
                if strcmp(obj.UIProperties.PlotTIC, 'on') == 0
                    
                    % Set unique handle for each plot
                    for j = 1:length(obj.ActivePlotData(i).YValues(1,:))
                        
                        set(obj.UIAxes.MultipleAxesPlot{i}(j),...
                            'Color', obj.ActivePlotData(i).LineColor{j});
                    end
                % If TIC button is selected
                else
                    set(obj.UIAxes.MultipleAxesPlot{i},...
                        'Color', 'black');
                end
                    
                % Plot baseline if it exists and button is on
                if strcmp(obj.UIProperties.ViewBaseline, 'on')
                    try
                        obj.UIAxes.MultipleAxesPlotBaseline{i} = plot(...
                            obj.ActivePlotData(i).XValues, obj.ActivePlotData(i).Baseline,...
                            'Parent', obj.UIAxes.MultipleAxes{i},...
                            'LineSmoothing', 'on',...
                            'Linewidth', obj.UIProperties.LineWidth,...
                            'YLimInclude', 'off',...
                            'Color', obj.UIProperties.BaselineColor);
                    catch
                        continue
                    end
                end
                
                if strcmp(obj.UIProperties.PlotTIC, 'on') == 0

                    if strcmp(obj.UIProperties.ViewPeaks, 'on')
                        
                        obj.UIAxes.MultipleAxesPlotPeaks{i} = plot(...
                            obj.ActivePlotData(i).Peaks(:,1), obj.ActivePlotData(i).Peaks(:,2),...
                            'Parent', obj.UIAxes.MultipleAxes{i},...
                            'LineStyle', 'none',...
                            'MarkerFaceColor', 'red',...
                            'MarkerEdgeColor', 'black',...
                            'LineWidth', 2,...
                            'MarkerSize', 9,...
                            'Marker', 'o');
                    else
                        obj.UIAxes.MultipleAxesPlotPeaks{i} = [];
                    end
                end
                
                if strcmp(obj.UIProperties.PlotTIC, 'on') == 0

                    set(obj.UIAxes.PeakDetectionCurrentSample, ...
                        'String', num2str(obj.ActivePlotData(1).ID));
                    obj.UIProperties.CurrentSampleID = obj.ActivePlotData(1).ID;
                    
                    set(obj.UIAxes.PeakDetectionCurrentIon, ...
                        'String', num2str(obj.UITable.AvailableIonsList{1,obj.ActivePlotData(1).Ions{1}}));
                    obj.UIProperties.CurrentIonID = obj.ActivePlotData(1).Ions{1};
                    
                    set(obj.UIAxes.PeakDetectionRetentionTime,...
                        'String', num2str(obj.UserPeaks{obj.ActivePlotData(1).ID, obj.ActivePlotData(1).Ions{1,1}}(1,1), '%6.1f'));
                    obj.UIProperties.CurrentRetentionTime = obj.UserPeaks{obj.ActivePlotData(1).ID, obj.ActivePlotData(1).Ions{1,1}}(1,1);

                end
            end
            
            % Turn on visibility of multiple overlay axes
            set(obj.UIAxes.MultipleAxes{obj.UIProperties.CurrentPlots},...
                'Visible', 'on',...
                'LineWidth', 1.15);

            UpdateAxesScale(obj);
            
            drawnow;
            
            %UpdateAxesLabels(obj);
        end
        
        % Update y-scale (normalized scale or same scale)
        function UpdateAxesScale(obj, varargin)
            
            % Determine if y-scale should be normalized or same
            switch obj.UIProperties.PlotScale
                
                % Normalize y-scale for all plots
                case 'on'
                        
                    % Set y limits if TIC data is selected
                    if strcmp(obj.UIProperties.PlotTIC, 'on') == 1
                
                        for i = 1:length(obj.ActivePlotData)

                            % Retreive max/min y values for current sample
                            YMin = min(obj.ActivePlotData(i).YValues);
                            YMax = max(obj.ActivePlotData(i).YValues);
                        
                            % Set y limits if multiple axes is selected
                            if strcmp(obj.UIProperties.PlotOverlay, 'on') == 0
                            
                                % Set y limits of multiple axes
                                set(obj.UIAxes.MultipleAxes{i},...
                                    'YLim', [(YMin - 0.05*YMax), (YMax + 0.05*YMax)]);
                            
                            % Set y limits if single axes is selected
                            else
                                YData = obj.ActivePlotData(i).YValues;
                                
                                % Normalize data
                                obj.ActivePlotData(i).YValues = ...
                                    (YData - YMin) / (YMax - YMin);
                                
                                % Set normalized y data as plot data
                                set(obj.UIAxes.SingleAxesPlot{i},...
                                    'YData', obj.ActivePlotData(i).YValues);
                                
                                %Try baseline normalization
                                try
                                    % Update y values
                                    set(obj.UIAxes.SingleAxesPlotBaseline{i},...
                                        'YData', obj.ActivePlotData(i).Baseline);
                                catch
                                    continue
                                end
                                
                                % Set y limits of single axes
                                set(obj.UIAxes.SingleAxes{1},...
                                    'YLim', [(0 - 0.05), (1 + 0.05)]);
                            end
                        end
                        
                        clear YMin YMax
                        
                    % Set y limits if EIC data is selected
                    else

                        % Set y limits if EIC data is selected
                        for i = 1:length(obj.ActivePlotData)
                            
                            % Find max/min values for selected ions
                            for j = 1:length(obj.ActivePlotData(i).YValues(1,:))

                                % Retreive max/min y values for current ions
                                YMin = min(obj.ActivePlotData(i).YValues(:,j));
                                YMax = max(obj.ActivePlotData(i).YValues(:,j));
                                
                                YData = obj.ActivePlotData(i).YValues(:,j);
                                                                
                                % Normalize data
                                obj.ActivePlotData(i).YValues(:,j) = ...
                                    (YData - YMin) / (YMax - YMin);
                                    
                                if strcmp(obj.UIProperties.ViewPeaks, 'on');
                                
                                    PeakData = obj.ActivePlotData(i).Peaks(j,2);

                                    obj.ActivePlotData(i).Peaks(j,2) = ...
                                    (PeakData - YMin) / (YMax - YMin);
                                end
                            end
                        end
                        
                        for i = 1:length(obj.ActivePlotData) 
                            
                            % Set y limits if multiple axes is selected
                            if strcmp(obj.UIProperties.PlotOverlay, 'on') == 0
                                
                                for j = 1:length(obj.ActivePlotData(i).YValues(1,:))
                                    
                                    % Set normalized y data as plot data
                                    set(obj.UIAxes.MultipleAxesPlot{i}(j),...
                                        'YData', obj.ActivePlotData(i).YValues(:,j));
                                    
                                    % Set baseline y data
                                    try
                                        set(obj.UIAxes.MultipleAxesPlotBaseline{i}(j),...
                                            'YData', obj.ActivePlotData(i).Baseline(:,j));
                                    catch
                                        continue
                                    end
                                end
                                
                                if strcmp(obj.UIProperties.ViewPeaks, 'on');
                                    if isempty(obj.UIAxes.MultipleAxesPlotPeaks) == 0
                                        set(obj.UIAxes.MultipleAxesPlotPeaks{i},...
                                            'YData', obj.ActivePlotData(i).Peaks(:,2));
                                    end
                                end
                                
                                % Set y limits of multiple axes
                                set(obj.UIAxes.MultipleAxes{i},...
                                    'YLim', [(0 - 0.05), (1 + 0.05)]);
                           
                            % Set y limits if single axes is selected
                            else
                                
                                for j = 1:length(obj.ActivePlotData(i).YValues(1,:))
                                    
                                    % Set normalized y data as plot data
                                    set(obj.UIAxes.SingleAxesPlot{i}(j),...
                                        'YData', obj.ActivePlotData(i).YValues(:,j));
                                    
                                    % Set normalized basline data
                                    try
                                        set(obj.UIAxes.SingleAxesPlotBaseline{i}(j),...
                                            'YData', obj.ActivePlotData(i).Baseline(:,j));
                                    catch
                                        continue
                                    end
                                end
                                
                                % Set y limits of single axes
                                set(obj.UIAxes.SingleAxes{1},...
                                    'YLim', [(0 - 0.05), (1 + 0.05)]);
                            end
                        end
                    end
                    
                % Same scale y-scale for all plots
                case 'off'
                    
                    % Set y limits if TIC data is selected
                    if strcmp(obj.UIProperties.PlotTIC, 'on') == 1
                    
                        % Set y limits if TIC data is selected
                        for i = 1:length(obj.ActivePlotData)
                        
                            % Retreive max/min y values for current sample
                            YMin(i) = min(obj.ActivePlotData(i).YValues);
                            YMax(i) = max(obj.ActivePlotData(i).YValues);
                        end
                        
                        YMin = min(YMin);
                        YMax = max(YMax);
                        
                        for i = 1:length(obj.ActivePlotData) 
                            
                            % Set y limits if multiple axes is selected
                            if strcmp(obj.UIProperties.PlotOverlay, 'on') == 0

                                % Set y limits of multiple axes
                                set(obj.UIAxes.MultipleAxes{i},...
                                    'YLim', [(YMin - 0.05*YMax), (YMax + 0.05*YMax)]);

                            % Set y limits if single axes is selected
                            else
                                
                                % Set y limits of single axes
                                set(obj.UIAxes.SingleAxes{1},...
                                    'YLim', [(YMin - 0.05*YMax), (YMax + 0.05*YMax)]);
                            end
                        end
                        
                    % Set y limits if EIC data is selected
                    else
                        
                        % Set y limits if TIC data is selected
                        for i = 1:length(obj.ActivePlotData)
                        
                            % Retreive max/min y values for current sample
                            YMin(i) = min(min(obj.ActivePlotData(i).YValues));
                            YMax(i) = max(max(obj.ActivePlotData(i).YValues));
                        end
                        
                        YMin = min(YMin);
                        YMax = max(YMax);
                        
                        for i = 1:length(obj.ActivePlotData) 
                            
                            % Set y limits if multiple axes is selected
                            if strcmp(obj.UIProperties.PlotOverlay, 'on') == 0

                                % Set y limits of multiple axes
                                set(obj.UIAxes.MultipleAxes{i},...
                                    'YLim', [(YMin - 0.05*YMax), (YMax + 0.05*YMax)]);

                            % Set y limits if single axes is selected
                            else
                                
                                % Set y limits of single axes
                                set(obj.UIAxes.SingleAxes{1},...
                                    'YLim', [(YMin - 0.05*YMax), (YMax + 0.05*YMax)]);
                            end
                        end
                    end                    
            end
        end
        
        % Update plot labels
        function UpdateAxesLabels(obj, varargin)

            try
                % Delete all labels
                delete(obj.UIAxes.Labels);
            catch
            end
            
            % Add sample labels if plotted on multiple axes
            switch obj.UIProperties.PlotOverlay
                
                % If plot overlay is off (separated axes)
                case 'off'
                                            
                    % Preallocate memory for variables
                    Label{obj.UIProperties.CurrentPlots} = [];
                    X = zeros(obj.UIProperties.CurrentPlots,1);
                    Y = zeros(obj.UIProperties.CurrentPlots,1);
                    
                    % For each sample shown on screen
                    for i = 1:obj.UIProperties.CurrentPlots
 
                        % Retrieve name of sample
                        Label{i} = obj.ActivePlotData(i).Name;
                        
                        % Check if normalized scale is off
                        if strcmp(obj.UIProperties.PlotScale, 'on') == 0
                        
                            % Determine top right corner of axes position
                            X(i) = max(obj.ActivePlotData(i).XValues);
                            Y(i) = max(max(obj.ActivePlotData(i).YValues));
                        
                        % If normalized scale is enabled
                        else
                            
                            % Set y to middle of normalized y-scale
                            X(i) = max(obj.ActivePlotData(i).XValues);
                            Y(i) = 0.5;
                        end
                    end
                    
                    % Position of label
                    XMax = max(X) * 0.925;
                    YMax = max(Y) * 0.50;
                        
                    % For each sample shown on screen
                    for i = 1:obj.UIProperties.CurrentPlots
                    
                        % Place label on axes
                        obj.UIAxes.Labels(i) = text(...
                            XMax, YMax, Label{i},...
                            'Parent', obj.UIAxes.MultipleAxes{i},...
                            'FontName', obj.UIProperties.FigureFont,...
                            'FontUnits', obj.UIProperties.FigureFontUnits,...
                            'FontSize', obj.UIProperties.FigureFontSizeHeader,...
                            'FontWeight', 'normal',...
                            'BackgroundColor', 'none',...
                            'HorizontalAlignment', 'center',...
                            'VerticalAlignment', 'bottom');                            
                    end
            end
        end
        
        % Reset axes
        function DestroyAxes(obj, varargin)
            
            % Turn the multiple axes off and reset those values
            if isempty(obj.UIAxes.MultipleAxes) == 0

                if isempty(obj.UIAxes.MultipleAxesPlotPeaks) == 0
                    for j = 1:length(obj.UIAxes.MultipleAxesPlotPeaks)
                        set(obj.UIAxes.MultipleAxesPlotPeaks{j}, 'Visible', 'off');
                    end
                end
                
                % Turn off multiple axes
                for i = 1:length(obj.UIAxes.MultipleAxes)
                    
                    % Turn off multiple axes and data
                    set(obj.UIAxes.MultipleAxes{i}, 'Visible', 'off');
                    
                    set(obj.UIAxes.MultipleAxesPlot{i}, 'Visible', 'off');
                        
                    try
                        set(obj.UIAxes.MultipleAxesPlotBaseline{i}, 'Visible', 'off');
                    catch
                        continue
                    end
                end
                
                % Reset multiple axes plot data
                obj.UIAxes.MultipleAxes = {};
                obj.UIAxes.MultipleAxesPlot = {};
                obj.UIAxes.MultipleAxesPlotBaseline = [];
                obj.UIAxes.MultipleAxesPlotPeaks = {};
            else
                % Reset multiple axes plot data
                obj.UIAxes.MultipleAxes = {};
                obj.UIAxes.MultipleAxesPlot = {};
                obj.UIAxes.MultipleAxesPlotBaseline = [];
                obj.UIAxes.MultipleAxesPlotPeaks = {};
            end
            
            % Turn off existing single axes
            if isempty(obj.UIAxes.SingleAxes) == 0
                
                % Turn off single axes data
                for i = 1:length(obj.UIAxes.SingleAxesPlot)
                    set(obj.UIAxes.SingleAxesPlot{i}, 'Visible', 'off');
                    
                    try
                        set(obj.UIAxes.SingleAxesPlotBaseline{i}, 'Visible', 'off');
                    catch
                        continue
                    end

                    if strcmp(obj.UIProperties.ViewPeaks, 'on');
                        if isempty(obj.UIAxes.MultipleAxesPlotPeaks) == 0
                            set(obj.UIAxes.SingleAxesPlotPeaks{i}, 'Visible', 'off');
                        end
                    end
                end
                
                % Turn off single axes
                set(obj.UIAxes.SingleAxes{1}, 'Visible', 'off')
                
                % Reset single axes plots
                obj.UIAxes.SingleAxes = [];
                obj.UIAxes.SingleAxesPlot = [];
                obj.UIAxes.SingleAxesPlotBaseline = [];
                obj.UIAxes.SingleAxesPlotPeaks = [];
            else
                % Reset single axes plots
                obj.UIAxes.SingleAxes = [];
                obj.UIAxes.SingleAxesPlot = [];
                obj.UIAxes.SingleAxesPlotBaseline = [];
                obj.UIAxes.SingleAxesPlotPeaks = [];
            end
        end
        
        % Peak detection
        function PeakDetection(obj, varargin)
            
            % For all peaks make a first guess
            for i = 1:length(obj.PlotData)
                
                % Determine how many rows in a five minute window
                MinTime = find(obj.PlotData(i).TimeValues >= 12, 1);
                MaxTime = find(obj.PlotData(i).TimeValues >= 17, 1);
                WindowSize = MaxTime - MinTime;
                
                % For all ions
                for j = 1:length(obj.UITable.AvailableIonsList(1,:))
                    
                    switch obj.UITable.AvailableIonsList{1,j}
                        
                        % Branched GDGTs
                    
                        % Ia
                        case 1022
                    
                            % Find retention time of largest peak
                            [PeakHeight, RetentionTime] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1022));
                            
                            RetentionTime = RetentionTime + MinTime - 1;
                        
                        % Ib
                        case 1020
                        
                            % Find retention time of largest peak > Ia
                            [~, WindowStart] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1022));
                            
                            % Determine window end row
                            WindowEnd = WindowStart + WindowSize + MinTime - 1;
                            
                            [PeakHeight, RetentionTime] = max(...
                                obj.PlotData(i).IntensityValues((WindowStart+MinTime-1):WindowEnd, 1020));
                            
                            RetentionTime = RetentionTime + WindowStart + MinTime - 1;
                            
                        % Ic
                        case 1018
                    
                            % Find retention time of largest peak > Ia
                            [~, WindowStart] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1022));
                            
                            % Determine window end row
                            WindowEnd = WindowStart + WindowSize + MinTime - 1;
                            
                            [PeakHeight, RetentionTime] = max(...
                                obj.PlotData(i).IntensityValues((WindowStart+MinTime-1):WindowEnd, 1018));
                            
                            RetentionTime = RetentionTime + WindowStart + MinTime - 1;
                            
                        % IIa
                        case 1036
                    
                            % Find retention time of largest peak
                            [PeakHeight, RetentionTime] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1036));
                            
                            RetentionTime = RetentionTime + MinTime - 1;
                        
                        % IIb
                        case 1034
                        
                            % Find retention time of largest peak > Ia
                            [~, WindowStart] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1036));
                            
                            % Determine window end row
                            WindowEnd = WindowStart + WindowSize + MinTime - 1;
                            
                            [PeakHeight, RetentionTime] = max(...
                                obj.PlotData(i).IntensityValues((WindowStart+MinTime-1):WindowEnd, 1034));
                            
                            RetentionTime = RetentionTime + WindowStart + MinTime - 1;
                            
                        % IIc
                        case 1032
                    
                            % Find retention time of largest peak > Ia
                            [~, WindowStart] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1036));
                            
                            % Determine window end row
                            WindowEnd = WindowStart + WindowSize + MinTime - 1;
                            
                            [PeakHeight, RetentionTime] = max(...
                                obj.PlotData(i).IntensityValues((WindowStart+MinTime-1):WindowEnd, 1032));
                            
                            RetentionTime = RetentionTime + WindowStart + MinTime - 1;
                         
                        % IIIa
                        case 1050
                    
                            % Find retention time of largest peak
                            [PeakHeight, RetentionTime] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1050));
                            
                            RetentionTime = RetentionTime + MinTime - 1;
                        
                        % IIIb
                        case 1048
                        
                            % Find retention time of largest peak > Ia
                            [~, WindowStart] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1022));
                            
                            % Determine window end row
                            WindowEnd = WindowStart + WindowSize + MinTime - 1;
                            
                            [PeakHeight, RetentionTime] = max(...
                                obj.PlotData(i).IntensityValues((WindowStart+MinTime-1):WindowEnd, 1048));
                            
                            RetentionTime = RetentionTime + WindowStart + MinTime - 1;
                            
                        % IIIc
                        case 1046
                    
                            % Find retention time of largest peak > Ia
                            [~, WindowStart] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1022));
                            
                            % Determine window end row
                            WindowEnd = WindowStart + WindowSize + MinTime;
                            
                            [PeakHeight, RetentionTime] = max(...
                                obj.PlotData(i).IntensityValues((WindowStart+MinTime-1):WindowEnd, 1046));
                            
                            RetentionTime = RetentionTime + WindowStart + MinTime - 1;
                            
                        % 0
                        case 1302
                    
                           % Find retention time of largest peak
                            [PeakHeight, RetentionTime] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1302));
                            
                            RetentionTime = RetentionTime + MinTime - 1;
                            
                        % 1
                        case 1300
                    
                            % Find retention time of largest peak > 0
                            [~, WindowStart] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1302));
                            
                            % Determine window end row
                            WindowEnd = WindowStart + WindowSize + MinTime;
                            
                            [PeakHeight, RetentionTime] = max(...
                                obj.PlotData(i).IntensityValues((WindowStart+MinTime-1):WindowEnd, 1300));
                            
                            RetentionTime = RetentionTime + WindowStart + MinTime - 1;
                            
                        % 2
                        case 1298
                    
                            % Find retention time of largest peak > 0
                            [~, WindowStart] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1302));
                            
                            % Determine window end row
                            WindowEnd = WindowStart + WindowSize + MinTime;
                            
                            [PeakHeight, RetentionTime] = max(...
                                obj.PlotData(i).IntensityValues((WindowStart+MinTime-1):WindowEnd, 1298));
                            
                            RetentionTime = RetentionTime + WindowStart + MinTime - 1;
                            
                        % 3
                        case 1296
                    
                            % Find retention time of largest peak > 0
                            [~, WindowStart] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1302));
                            
                            % Determine window end row
                            WindowEnd = WindowStart + WindowSize + MinTime;
                            
                            [PeakHeight, RetentionTime] = max(...
                                obj.PlotData(i).IntensityValues((WindowStart+MinTime-1):WindowEnd, 1296));
                            
                            RetentionTime = RetentionTime + WindowStart + MinTime - 1;
                                
                        % Cren.
                        case 1292
                    
                           % Find retention time of largest peak
                            [PeakHeight, RetentionTime] = max(obj.PlotData(i).IntensityValues(MinTime:end, 1292));
                            
                            RetentionTime = RetentionTime + MinTime - 1;
                            
                        otherwise
                            
                            % Find retention time of largest peak
                            [PeakHeight, RetentionTime] = max(obj.PlotData(i).IntensityValues(MinTime:end, obj.UITable.AvailableIonsList{1,j}));
                            
                            RetentionTime = RetentionTime + MinTime - 1;
                    end
                    
                    % Set retention time
                    obj.UserPeaks{i,j}(1,1) = obj.PlotData(i).TimeValues(RetentionTime, 1);
                    
                    % Set peak height
                    obj.UserPeaks{i,j}(1,2) = PeakHeight;
                    
                    % Set table data
                    obj.UITable.TableData{obj.PlotData(i).ID, 7+j} = ...
                        num2str(obj.PlotData(i).TimeValues(RetentionTime,1), '%6.2f');
                end
            end
            
            % Cell properties for peak retention time
            for i = 1:length(obj.UITable.AvailableIonsList(1,:))
                
                ColumnName{7+i} = num2str(obj.UITable.AvailableIonsList{1,i});
                ColumnFormat{7+i} = 'char';
                ColumnEdit(7+i) = false;
                
                obj.UIPositions.TableColumnWidth{7+i} = obj.UIPositions.TablePosition(3) * 0.2;
            end
            
            % Set up cells for peak area
            for i = 1:length(obj.UITable.AvailableIonsList(1,:))
               
                % Column to start in
                StartColumn = 7 + length(obj.UITable.AvailableIonsList(1,:));
                
                % Column name, format and editable properties
                ColumnName{StartColumn+i} = num2str(obj.UITable.AvailableIonsList{1,i});
                ColumnFormat{StartColumn+i} = 'char';
                ColumnEdit(StartColumn+i) = false;
                obj.UIPositions.TableColumnWidth{StartColumn+i} = obj.UIPositions.TablePosition(3) * 0.2;
                
                % For each sample available
                for j = 1:length(obj.UITable.AvailableSamplesList(1,:))
                    
                    % Set table data
                    obj.UITable.TableData{obj.PlotData(j).ID, StartColumn+i} = '';
                end
            end
            
            StartColumn = 7 + (2*length(obj.UITable.AvailableIonsList(1,:)));
            
             % Set up cells for peak area
            for i = 1:4
                for j = 1:length(obj.UITable.AvailableSamplesList(1,:))

                    % Set table data
                    obj.UITable.TableData{obj.PlotData(j).ID, StartColumn+i} = '';
                end
            end 
            
            ColumnName{StartColumn + 1} = 'MBT';
            ColumnName{StartColumn + 2} = 'CBT';
            ColumnName{StartColumn + 3} = 'pH';
            ColumnName{StartColumn + 4} = 'MAAT';
            
            ColumnFormat{StartColumn + 1} = 'char';
            ColumnFormat{StartColumn + 2} = 'char';
            ColumnFormat{StartColumn + 3} = 'char';
            ColumnFormat{StartColumn + 4} = 'char';

            ColumnEdit(StartColumn + 1) = false;
            ColumnEdit(StartColumn + 2) = false;
            ColumnEdit(StartColumn + 3) = false;
            ColumnEdit(StartColumn + 4) = false;
            
            % Set properties for first seven columns
            for i = 1:7
                
                ColumnFormat{i} = 'char';
                ColumnEdit(i) = false;
            end
            
            % Make sure sample name column is editable
            ColumnEdit(2) = true;
            
            % Assign column names in case they were erased
            ColumnName{1} = 'ID';
            ColumnName{2} = 'Name';
            ColumnName{3} = 'Vial';
            ColumnName{4} = 'Line';
            ColumnName{5} = 'Trial';
            ColumnName{6} = 'Crop Min.';
            ColumnName{7} = 'Crop Max.';
            
            set(obj.UITable.Table, ...
                'ColumnName', ColumnName,...
                'ColumnFormat', ColumnFormat,...
                'ColumnEditable', ColumnEdit,...
                'ColumnWidth', obj.UIPositions.TableColumnWidth,...
                'Data', obj.UITable.TableData);
        end
    end
end
